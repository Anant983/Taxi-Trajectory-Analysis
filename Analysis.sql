
DROP SCHEMA IF EXISTS taxi_service CASCADE;


CREATE SCHEMA taxi_service;


CREATE TABLE taxi_service.ride_details (
    TRIP_ID VARCHAR PRIMARY KEY,
    CALL_TYPE VARCHAR,
    ORIGIN_CALL VARCHAR,
    ORIGIN_STAND VARCHAR,
    TAXI_ID VARCHAR,
    TIMESTAMP INTEGER, 
    MISSING_DATA BOOLEAN,
    POLYLINE VARCHAR
);


COPY taxi_service.ride_details
FROM '/Users/anant/Documents/Studies/College/UQ/Adv. for high dim/Prac 2/modified_data.csv' DELIMITER ',' CSV HEADER;

DROP TABLE IF EXISTS taxi_service.ride_details_geom;

CREATE TABLE taxi_service.ride_details_geom (
    TRIP_ID VARCHAR PRIMARY KEY,
    CALL_TYPE VARCHAR,
	TAXI_ID VARCHAR,
    TIMESTAMP TIMESTAMP,
    START_POINT GEOMETRY(PointM, 4326),
    END_POINT GEOMETRY(PointM, 4326),
    TRAJECTORY GEOMETRY(LineStringM, 4326)
);

-- Insert data into the new table, converting POLYLINE to geometry and extracting start and end points
INSERT INTO taxi_service.ride_details_geom (TRIP_ID, CALL_TYPE,TAXI_ID, TIMESTAMP, START_POINT, END_POINT, TRAJECTORY)
SELECT
    TRIP_ID,
    CALL_TYPE,
	TAXI_ID,
    TO_TIMESTAMP(TIMESTAMP)::TIMESTAMP,
    ST_StartPoint(ST_GeomFromText(POLYLINE, 4326)) AS START_POINT,
    ST_EndPoint(ST_GeomFromText(POLYLINE, 4326)) AS END_POINT,
    ST_GeomFromText(POLYLINE, 4326) AS TRAJECTORY
FROM
    taxi_service.ride_details




/* 
Query Task 1:
There is a roundabout just below the famous Casa Da MÃºsica with the coordinates as -8.6294468, 41.1581764
I want to print out the trajectories of the trips that have used that roundabout for a particular month. So any trip
that has a point within 150m of the roundabout, will be included as that trajectory is using that roundabout. 
In this I have used the Range query so that the trajectory is within 150m of the roundabout, i have created a Buffer around
the Roundabout of 150m so that any trajectory that intersects with the buffer will be selected.
I have limited only 10 trips here, for the sake of showing the results.
*/

/* Test Case 1.1: For the first case I am choosing the month of January, 2014 */
/* Test Case 1.1 with YOUR_INDEX_METHOD_1 */
CREATE INDEX idx_trajectory
ON taxi_service.ride_details_geom
USING SPGIST(TRAJECTORY);

SELECT 
    ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326) AS roundabout_point;

EXPLAIN (ANALYZE ON, BUFFERS ON)
-- Creating a geometry point with a buffer to define the area of interest
WITH roundabout AS (
    SELECT ST_Buffer(ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326)::geography, 150)::geometry AS geom
)
SELECT 
    rd.TRIP_ID,
    ST_Distance(rd.TRAJECTORY::geography, ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326)::geography) AS closest_distance
FROM 
    taxi_service.ride_details_geom rd, roundabout ra
WHERE 
    ST_Intersects(rd.TRAJECTORY, ra.geom) 
    AND rd.TIMESTAMP::DATE >= '2014-01-01'
    AND rd.TIMESTAMP::DATE < '2014-01-31'
LIMIT 10;
	
/* Outputs:
TRIP ID                 CLOSEST_DISTANCE
"1389859963620000263"	62.73220198
"1389816324620000179"	60.51839013
"1389092738620000668"	130.30189614
"1389087398620000205"	67.74834379
"1390005740620000520"	65.4079156
"1389175647620000205"	66.66568815
"1388915435620000116"	40.89151288
"1388755079620000163"	62.90525595
"1389352567620000083"	94.43698861
"1390089052620000157"	62.35883556
 */
 /* QUERY PLAN:
"Limit  (cost=1065.02..23617.78 rows=10 width=28) (actual time=123.327..137.192 rows=10 loops=1)"
"  Buffers: shared hit=29620"
"  ->  Gather  (cost=1065.02..25873.05 rows=11 width=28) (actual time=123.326..137.189 rows=10 loops=1)"
"        Workers Planned: 1"
"        Workers Launched: 1"
"        Buffers: shared hit=29620"
"        ->  Parallel Bitmap Heap Scan on ride_details_geom rd  (cost=65.02..24871.95 rows=6 width=28) (actual time=109.437..112.143 rows=6 loops=2)"
"              Filter: (((""timestamp"")::date >= '2014-01-01'::date) AND ((""timestamp"")::date < '2014-01-21'::date) AND st_intersects(trajectorygeometry))"
"              Rows Removed by Filter: 410"
"              Heap Blocks: exact=11 lossy=83"
"              Buffers: shared hit=29620"
"              ->  Bitmap Index Scan on idx_trajectory  (cost=0.00..65.01 rows=2230 width=0) (actual time=113.204..113.204 rows=478980 loops=1)"
"                    Index Cond: (trajectorygeometry)"
"                    Buffers: shared hit=28963"
"Planning Time: 1.132 ms"
"Execution Time: 137.247 ms"
 */

/* Test Case 1.1: For the first case I am choosing the month of January, 2014 for the trips */
/* Test Case 1.1 with YOUR_INDEX_METHOD_2 */
CREATE INDEX idx_trajectory
ON taxi_service.ride_details_geom
USING BRIN (TRAJECTORY);

SELECT 
    ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326) AS roundabout_point;


EXPLAIN (ANALYZE ON, BUFFERS ON)
-- Creating a geometry point with a buffer to define the area of interest
WITH roundabout AS (
    SELECT ST_Buffer(ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326)::geography, 150)::geometry AS geom
)
SELECT 
    rd.TRIP_ID ,
    ST_Distance(rd.TRAJECTORY::geography, ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326)::geography) AS closest_distance
FROM 
    taxi_service.ride_details_geom rd, roundabout ra
WHERE 
    ST_Intersects(rd.TRAJECTORY, ra.geom) 
    AND rd.TIMESTAMP::DATE >= '2014-01-01'
    AND rd.TIMESTAMP::DATE < '2014-01-31'
limit 10;
/* Outputs:
TRIP ID                 CLOSEST_DISTANCE
"1389859963620000263"	62.73220198
"1389211136620000250"	31.56869167
"1389816324620000179"	60.51839013
"1389092738620000668"	130.30189614
"1389087398620000205"	67.74834379
"1388755079620000163"	62.90525595
"1389352567620000083"	94.43698861
"1390089052620000157"	62.35883556
"1390122593620000116"	38.97730787
"1389025084620000446"	69.81590923
 */
 /* Outputs:
"Limit  (cost=1054.41..237156.58 rows=10 width=28) (actual time=63.201..84.699 rows=10 loops=1)"
"  Buffers: shared hit=1219"
"  ->  Gather  (cost=1054.41..260766.79 rows=11 width=28) (actual time=63.200..84.694 rows=10 loops=1)"
"        Workers Planned: 2"
"        Workers Launched: 2"
"        Buffers: shared hit=1219"
"        ->  Parallel Bitmap Heap Scan on ride_details_geom rd  (cost=54.41..259765.69 rows=5 width=28) (actual time=32.916..36.147 rows=4 loops=3)"
"              Filter: (((""timestamp"")::date >= '2014-01-01'::date) AND ((""timestamp"")::date < '2014-01-21'::date) AND st_intersects(trajectorygeometry))"
"              Rows Removed by Filter: 292"
"              Heap Blocks: lossy=97"
"              Buffers: shared hit=1219"
"              ->  Bitmap Index Scan on idx_trajectory  (cost=0.00..54.41 rows=32075 width=0) (actual time=60.332..60.332 rows=2941430 loops=1)"
"                    Index Cond: (trajectorygeometry)"
"                    Buffers: shared hit=15"
"Planning:"
"  Buffers: shared hit=1"
"Planning Time: 0.402 ms"
"Execution Time: 84.746 ms"
 */

 /* Test Case 1.1: For the first case I am choosing the month of January, 2014 for the trips */
/* Test Case 1.1 with YOUR_INDEX_METHOD_3 */
CREATE INDEX idx_trajectory
ON taxi_service.ride_details_geom
USING GIST (TRAJECTORY);

SELECT 
    ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326) AS roundabout_point;


EXPLAIN (ANALYZE ON, BUFFERS ON)
-- Creating a geometry point with a buffer to define the area of interest
WITH roundabout AS (
    SELECT ST_Buffer(ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326)::geography, 150)::geometry AS geom
)
SELECT 
    rd.TRIP_ID ,
    ST_Distance(rd.TRAJECTORY::geography, ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326)::geography) AS closest_distance
FROM 
    taxi_service.ride_details_geom rd, roundabout ra
WHERE 
    ST_Intersects(rd.TRAJECTORY, ra.geom)
    AND rd.TIMESTAMP::DATE >= '2014-01-01'
    AND rd.TIMESTAMP::DATE < '2014-01-31'
limit 10;
	
/* Outputs:
TRIP ID                 CLOSEST_DISTANCE
"1389859963620000263"	62.73220198
"1389816324620000179"	60.51839013
"1389092738620000668"	130.30189614
"1389087398620000205"	67.74834379
"1390005740620000520"	65.4079156
"1389175647620000205"	66.66568815
"1388915435620000116"	40.89151288
"1388755079620000163"	62.90525595
"1389352567620000083"	94.43698861
"1390089052620000157"	62.35883556
 */
 /* Outputs:
"Limit  (cost=1049.02..23601.78 rows=10 width=28) (actual time=268.756..280.315 rows=10 loops=1)"
"  Buffers: shared hit=750 read=5446"
"  ->  Gather  (cost=1049.02..25857.05 rows=11 width=28) (actual time=268.755..280.311 rows=10 loops=1)"
"        Workers Planned: 1"
"        Workers Launched: 1"
"        Buffers: shared hit=750 read=5446"
"        ->  Parallel Bitmap Heap Scan on ride_details_geom rd  (cost=49.02..24855.95 rows=6 width=28) (actual time=260.858..263.671 rows=6 loops=2)"
"              Filter: (((""timestamp"")::date >= '2014-01-01'::date) AND ((""timestamp"")::date < '2014-01-21'::date) AND st_intersects(trajectorygeometry))"
"              Rows Removed by Filter: 408"
"              Heap Blocks: exact=9 lossy=85"
"              Buffers: shared hit=750 read=5446"
"              ->  Bitmap Index Scan on idx_trajectory  (cost=0.00..49.01 rows=2230 width=0) (actual time=260.796..260.797 rows=478980 loops=1)"
"                    Index Cond: (trajectorygeometry)"
"                    Buffers: shared read=5446"
"Planning:"
"  Buffers: shared hit=20 read=3"
"Planning Time: 1.691 ms"
"Execution Time: 280.446 ms"
 */


 /* Test Case 1.2: For the second case I am choosing the month of March, 2014 for the trips */
/* Test Case 1.2 with YOUR_INDEX_METHOD_1 */
CREATE INDEX idx_trajectory
ON taxi_service.ride_details_geom
USING GIST (TRAJECTORY);

SELECT 
    ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326) AS roundabout_point;


EXPLAIN (ANALYZE ON, BUFFERS ON)
-- Creating a geometry point with a buffer to define the area of interest
WITH roundabout AS (
    SELECT ST_Buffer(ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326)::geography, 150)::geometry AS geom
)
SELECT 
    rd.TRIP_ID ,
    ST_Distance(rd.TRAJECTORY::geography, ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326)::geography) AS closest_distance
FROM 
    taxi_service.ride_details_geom rd, roundabout ra
WHERE 
    ST_Intersects(rd.TRAJECTORY, ra.geom)
    AND rd.TIMESTAMP::DATE >= '2014-03-01'
    AND rd.TIMESTAMP::DATE < '2014-03-31'
limit 10;
	
/* Outputs:
TRIP ID                 CLOSEST_DISTANCE
"1395081407620000904"	48.24527613
"1395046403620000470"	59.22106394
"1393665772620000541"	42.41274847
"1395414399620000109"	58.26627739
"1393855891620000205"	64.24949057
"1395068733620000205"	68.00380307
"1395481118620000539"	66.69198255
"1394104903620000338"	140.66944603
"1395670647620000206"	65.71221904
"1395573272620000510"	112.48074997
 */
 /* QUERY PLAN:
"Limit  (cost=1049.02..23601.78 rows=10 width=28) (actual time=129.540..143.295 rows=10 loops=1)"
"  Buffers: shared hit=6130 read=40"
"  ->  Gather  (cost=1049.02..25857.05 rows=11 width=28) (actual time=129.539..143.292 rows=10 loops=1)"
"        Workers Planned: 1"
"        Workers Launched: 1"
"        Buffers: shared hit=6130 read=40"
"        ->  Parallel Bitmap Heap Scan on ride_details_geom rd  (cost=49.02..24855.95 rows=6 width=28) (actual time=113.242..117.533 rows=6 loops=2)"
"              Filter: (((""timestamp"")::date >= '2014-03-01'::date) AND ((""timestamp"")::date < '2014-03-31'::date) AND st_intersects(trajectorygeometry))"
"              Rows Removed by Filter: 304"
"              Heap Blocks: exact=4 lossy=31"
"              Buffers: shared hit=6130 read=40"
"              ->  Bitmap Index Scan on idx_trajectory  (cost=0.00..49.01 rows=2230 width=0) (actual time=121.436..121.436 rows=478980 loops=1)"
"                    Index Cond: (trajectorygeometry)"
"                    Buffers: shared hit=5446"
"Planning Time: 0.477 ms"
"Execution Time: 143.581 ms"
 */

/* Test Case 1.2: For the second case I am choosing the month of March, 2014 for the trips */
/* Test Case 1.2 with YOUR_INDEX_METHOD_2 */
CREATE INDEX idx_trajectory
ON taxi_service.ride_details_geom
USING SPGIST (TRAJECTORY);

SELECT 
    ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326) AS roundabout_point;


EXPLAIN (ANALYZE ON, BUFFERS ON)
-- Creating a geometry point with a buffer to define the area of interest
WITH roundabout AS (
    SELECT ST_Buffer(ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326)::geography, 150)::geometry AS geom
)
SELECT 
    rd.TRIP_ID ,
    ST_Distance(rd.TRAJECTORY::geography, ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326)::geography) AS closest_distance
FROM 
    taxi_service.ride_details_geom rd, roundabout ra
WHERE 
    ST_Intersects(rd.TRAJECTORY, ra.geom) 
    AND rd.TIMESTAMP::DATE >= '2014-03-01'
    AND rd.TIMESTAMP::DATE < '2014-03-31'
limit 10;
	
/* Outputs:
TRIP ID                 CLOSEST_DISTANCE
"1395081407620000904"	48.24527613
"1395046403620000470"	59.22106394
"1393665772620000541"	42.41274847
"1395414399620000109"	58.26627739
"1393855891620000205"	64.24949057
"1395068733620000205"	68.00380307
"1395481118620000539"	66.69198255
"1394104903620000338"	140.66944603
"1395670647620000206"	65.71221904
"1395573272620000510"	112.48074997
 */
 /* Outputs:
"Limit  (cost=1065.02..23617.78 rows=10 width=28) (actual time=59.337..69.495 rows=10 loops=1)"
"  Buffers: shared hit=30225 read=1"
"  ->  Gather  (cost=1065.02..25873.05 rows=11 width=28) (actual time=59.336..69.494 rows=10 loops=1)"
"        Workers Planned: 1"
"        Workers Launched: 1"
"        Buffers: shared hit=30225 read=1"
"        ->  Parallel Bitmap Heap Scan on ride_details_geom rd  (cost=65.02..24871.95 rows=6 width=28) (actual time=55.018..57.257 rows=6 loops=2)"
"              Filter: (((""timestamp"")::date >= '2014-03-01'::date) AND ((""timestamp"")::date < '2014-03-31'::date) AND st_intersects(trajectorygeometry))"
"              Rows Removed by Filter: 288"
"              Heap Blocks: exact=6 lossy=30"
"              Buffers: shared hit=30225 read=1"
"              ->  Bitmap Index Scan on idx_trajectory  (cost=0.00..65.01 rows=2230 width=0) (actual time=51.958..51.959 rows=478980 loops=1)"
"                    Index Cond: (trajectorygeometry)"
"                    Buffers: shared hit=29610"
"Planning:"
"  Buffers: shared hit=6"
"Planning Time: 0.276 ms"
"Execution Time: 69.525 ms"
 */

 /* Test Case 1.2: For the second case I am choosing the month of March, 2014 for the trips  */
/* Test Case 1.2 with YOUR_INDEX_METHOD_3 */
CREATE INDEX idx_trajectory
ON taxi_service.ride_details_geom
USING BRIN (TRAJECTORY);

SELECT 
    ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326) AS roundabout_point;


EXPLAIN (ANALYZE ON, BUFFERS ON)
-- Creating a geometry point with a buffer to define the area of interest
WITH roundabout AS (
    SELECT ST_Buffer(ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326)::geography, 150)::geometry AS geom
)
SELECT 
    rd.TRIP_ID ,
    ST_Distance(rd.TRAJECTORY::geography, ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326)::geography) AS closest_distance
FROM 
    taxi_service.ride_details_geom rd, roundabout ra
WHERE 
    ST_Intersects(rd.TRAJECTORY, ra.geom) 
    AND rd.TIMESTAMP::DATE >= '2014-03-01'
    AND rd.TIMESTAMP::DATE < '2014-03-31'
limit 10;
	
/* Outputs:
TRIP ID                 CLOSEST_DISTANCE
"1395081407620000904"	48.24527613
"1394120983620000693"	89.23856363
"1395046403620000470"	59.22106394
"1393665772620000541"	42.41274847
"1395414399620000109"	58.26627739
"1394104903620000338"	140.66944603
"1395670647620000206"	65.71221904
"1395573272620000510"	112.48074997
"1395740034620000205"	54.31139539
"1395772720620000902"	85.34714223
 */
 /* Outputs:
"Limit  (cost=1054.41..237156.58 rows=10 width=28) (actual time=15.681..29.037 rows=10 loops=1)"
"  Buffers: shared hit=1213 read=7"
"  ->  Gather  (cost=1054.41..260766.79 rows=11 width=28) (actual time=15.680..29.033 rows=10 loops=1)"
"        Workers Planned: 2"
"        Workers Launched: 2"
"        Buffers: shared hit=1213 read=7"
"        ->  Parallel Bitmap Heap Scan on ride_details_geom rd  (cost=54.41..259765.69 rows=5 width=28) (actual time=11.822..14.592 rows=4 loops=3)"
"              Filter: (((""timestamp"")::date >= '2014-03-01'::date) AND ((""timestamp"")::date < '2014-03-31'::date) AND st_intersects(trajectorygeometry))"
"              Rows Removed by Filter: 225"
"              Heap Blocks: lossy=49"
"              Buffers: shared hit=1213 read=7"
"              ->  Bitmap Index Scan on idx_trajectory  (cost=0.00..54.41 rows=32075 width=0) (actual time=11.166..11.166 rows=2941430 loops=1)"
"                    Index Cond: (trajectorygeometry)"
"                    Buffers: shared hit=15"
"Planning:"
"  Buffers: shared hit=6"
"Planning Time: 0.234 ms"
"Execution Time: 29.064 ms"
 */


/* Test Case 1.3: For the Third case I am choosing the month of May, 2014 for the trips */
/* Test Case 1.3 with YOUR_INDEX_METHOD_1 */
CREATE INDEX idx_trajectory
ON taxi_service.ride_details_geom
USING BRIN (TRAJECTORY);

SELECT 
    ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326) AS roundabout_point;


EXPLAIN (ANALYZE ON, BUFFERS ON)
-- Creating a geometry point with a buffer to define the area of interest
WITH roundabout AS (
    SELECT ST_Buffer(ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326)::geography, 150)::geometry AS geom
)
SELECT 
    rd.TRIP_ID ,
    ST_Distance(rd.TRAJECTORY::geography, ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326)::geography) AS closest_distance
FROM 
    taxi_service.ride_details_geom rd, roundabout ra
WHERE 
    ST_Intersects(rd.TRAJECTORY, ra.geom) 
    AND rd.TIMESTAMP::DATE >= '2014-05-01'
    AND rd.TIMESTAMP::DATE < '2014-05-31'
limit 10;
	
/* Outputs:
TRIP ID                 CLOSEST_DISTANCE
"1399543127620000073"	62.41231977
"1399568061620000902"	97.6749213
"1399766645620000276"	93.17240219
"1401275256620000902"	56.16680234
"1400657783620000205"	58.22702326
"1400891479620000520"	47.56438863
"1400921949620000159"	125.53624299
"1399277874620000205"	60.16538901
"1400398964620000116"	62.59425378
"1400230619620000205"	65.55127701
 */
 /* QUERY PLAN:
"Limit  (cost=1054.41..237156.58 rows=10 width=28) (actual time=14.125..29.809 rows=10 loops=1)"
"  Buffers: shared hit=1500 read=408"
"  ->  Gather  (cost=1054.41..260766.79 rows=11 width=28) (actual time=14.125..29.805 rows=10 loops=1)"
"        Workers Planned: 2"
"        Workers Launched: 2"
"        Buffers: shared hit=1500 read=408"
"        ->  Parallel Bitmap Heap Scan on ride_details_geom rd  (cost=54.41..259765.69 rows=5 width=28) (actual time=10.914..18.804 rows=9 loops=3)"
"              Filter: (((""timestamp"")::date >= '2014-05-01'::date) AND ((""timestamp"")::date < '2014-05-31'::date) AND st_intersects(trajectorygeometry))"
"              Rows Removed by Filter: 501"
"              Heap Blocks: lossy=146"
"              Buffers: shared hit=1500 read=408"
"              ->  Bitmap Index Scan on idx_trajectory  (cost=0.00..54.41 rows=32075 width=0) (actual time=8.074..8.074 rows=2941430 loops=1)"
"                    Index Cond: (trajectorygeometry)"
"                    Buffers: shared hit=15"
"Planning:"
"  Buffers: shared hit=6"
"Planning Time: 0.255 ms"
"Execution Time: 29.838 ms"
 */

/* Test Case 1.3: For the Third case I am choosing the month of May, 2014 for the trips */
/* Test Case 1.3 with YOUR_INDEX_METHOD_2 */
CREATE INDEX idx_trajectory
ON taxi_service.ride_details_geom
USING SPGIST (TRAJECTORY);

SELECT 
    ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326) AS roundabout_point;


EXPLAIN (ANALYZE ON, BUFFERS ON)
-- Creating a geometry point with a buffer to define the area of interest
WITH roundabout AS (
    SELECT ST_Buffer(ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326)::geography, 150)::geometry AS geom
)
SELECT 
    rd.TRIP_ID ,
    ST_Distance(rd.TRAJECTORY::geography, ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326)::geography) AS closest_distance
FROM 
    taxi_service.ride_details_geom rd, roundabout ra
WHERE 
    ST_Intersects(rd.TRAJECTORY, ra.geom) 
    AND rd.TIMESTAMP::DATE >= '2014-05-01'
    AND rd.TIMESTAMP::DATE < '2014-05-31'
limit 10;
/* Outputs:
TRIP ID                 CLOSEST_DISTANCE
"1399568061620000902"	97.6749213
"1399766645620000276"	93.17240219
"1401275256620000902"	56.16680234
"1400657783620000205"	58.22702326
"1400891479620000520"	47.56438863
"1400921949620000159"	125.53624299
"1400230682620000651"	61.05150409
"1400512109620000213"	95.45406619
"1400418290620000541"	75.64917493
"1399277874620000205"	60.16538901
 */
 /* Outputs:
"Limit  (cost=1065.02..23617.78 rows=10 width=28) (actual time=54.872..66.463 rows=10 loops=1)"
"  Buffers: shared hit=30467"
"  ->  Gather  (cost=1065.02..25873.05 rows=11 width=28) (actual time=54.871..66.461 rows=10 loops=1)"
"        Workers Planned: 1"
"        Workers Launched: 1"
"        Buffers: shared hit=30467"
"        ->  Parallel Bitmap Heap Scan on ride_details_geom rd  (cost=65.02..24871.95 rows=6 width=28) (actual time=52.419..55.326 rows=6 loops=2)"
"              Filter: (((""timestamp"")::date >= '2014-05-01'::date) AND ((""timestamp"")::date < '2014-05-31'::date) AND st_intersects(trajectorygeometry))"
"              Rows Removed by Filter: 416"
"              Heap Blocks: exact=21 lossy=82"
"              Buffers: shared hit=30467"
"              ->  Bitmap Index Scan on idx_trajectory  (cost=0.00..65.01 rows=2230 width=0) (actual time=47.405..47.405 rows=478980 loops=1)"
"                    Index Cond: (trajectorygeometry)"
"                    Buffers: shared hit=29610"
"Planning:"
"  Buffers: shared hit=6"
"Planning Time: 0.311 ms"
"Execution Time: 66.478 ms"
 */

/* Test Case 1.3: DESCRIBE YOUR CASE HERE */
/* Test Case 1.3 with YOUR_INDEX_METHOD_3 */
CREATE INDEX idx_trajectory
ON taxi_service.ride_details_geom
USING GIST (TRAJECTORY);

SELECT 
    ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326) AS roundabout_point;


EXPLAIN (ANALYZE ON, BUFFERS ON)
-- Creating a geometry point with a buffer to define the area of interest
WITH roundabout AS (
    SELECT ST_Buffer(ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326)::geography, 150)::geometry AS geom
)
SELECT 
    rd.TRIP_ID ,
    ST_Distance(rd.TRAJECTORY::geography, ST_SetSRID(ST_MakePoint(-8.6294468, 41.1581764), 4326)::geography) AS closest_distance
FROM 
    taxi_service.ride_details_geom rd, roundabout ra
WHERE 
    ST_Intersects(rd.TRAJECTORY, ra.geom) 
    AND rd.TIMESTAMP::DATE >= '2014-05-01'
    AND rd.TIMESTAMP::DATE < '2014-05-31'
limit 10;
	
/* Outputs:
TRIP ID                 CLOSEST_DISTANCE
"1399543127620000073"	62.41231977
"1401275256620000902"	56.16680234
"1400657783620000205"	58.22702326
"1400891479620000520"	47.56438863
"1400921949620000159"	125.53624299
"1400230682620000651"	61.05150409
"1400512109620000213"	95.45406619
"1400418290620000541"	75.64917493
"1399277874620000205"	60.16538901
"1400398964620000116"	62.59425378
 */
 /* Outputs:
"Limit  (cost=1049.02..23601.78 rows=10 width=28) (actual time=80.094..90.426 rows=10 loops=1)"
"  Buffers: shared hit=950 read=5446"
"  ->  Gather  (cost=1049.02..25857.05 rows=11 width=28) (actual time=80.093..90.425 rows=10 loops=1)"
"        Workers Planned: 1"
"        Workers Launched: 1"
"        Buffers: shared hit=950 read=5446"
"        ->  Parallel Bitmap Heap Scan on ride_details_geom rd  (cost=49.02..24855.95 rows=6 width=28) (actual time=76.440..79.176 rows=6 loops=2)"
"              Filter: (((""timestamp"")::date >= '2014-05-01'::date) AND ((""timestamp"")::date < '2014-05-31'::date) AND st_intersects(trajectorygeometry))"
"              Rows Removed by Filter: 423"
"              Heap Blocks: exact=10 lossy=93"
"              Buffers: shared hit=950 read=5446"
"              ->  Bitmap Index Scan on idx_trajectory  (cost=0.00..49.01 rows=2230 width=0) (actual time=72.823..72.823 rows=478980 loops=1)"
"                    Index Cond: (trajectorygeometry)"
"                    Buffers: shared read=5446"
"Planning:"
"  Buffers: shared hit=5"
"Planning Time: 0.439 ms"
"Execution Time: 90.442 ms"
 */



/* 
Query Task 2:
Every driver completes multiple trips in a month, an efficient driver is one that travels the moost distance in the
least amount of total time. for this query I have calculated the distance travelled by a taxi in a particular month and then
divided it by the total time taken by that diver for those trips. I have also taken the amount of trips that diver has done 
in that month. After this i have used the SKYLINE algorithm to optimize both of these the (total dist/total time) and the
trips done in a month. Using the index on the start_point. 
*/

/* Test Case 2.1: For the first case I am choosing the month of January, 2014 */
/* Test Case 2.1 with YOUR_INDEX_METHOD_1 */
CREATE INDEX idx_start_point
ON taxi_service.ride_details_geom
USING BRIN (START_POINT);


EXPLAIN (ANALYZE ON, BUFFERS ON)
WITH month_trips AS (
    SELECT
        TAXI_ID,
        SUM(ST_Length(TRAJECTORY::geography)) AS total_distance,
        SUM(ST_M(ST_EndPoint(TRAJECTORY)) - ST_M(ST_StartPoint(TRAJECTORY))) AS total_duration,
        COUNT(*) AS trip_count
    FROM
        taxi_service.ride_details_geom
    WHERE
        EXTRACT(MONTH FROM TO_TIMESTAMP(ST_M(ST_StartPoint(TRAJECTORY)))) = 1 -- Input parameter for month number
        AND START_POINT IS NOT NULL 
    GROUP BY
        TAXI_ID
),
skyline_trips AS (
    SELECT
        a.TAXI_ID,
        a.average_speed,
        a.trip_count,
        ROW_NUMBER() OVER () AS skyline_rank
    FROM (
        SELECT
            TAXI_ID,
            total_distance / NULLIF(total_duration, 0) AS average_speed,
            trip_count
        FROM
            month_trips
    ) AS a
    WHERE NOT EXISTS (
        SELECT 1
        FROM
            month_trips AS b
        WHERE
            (a.average_speed <= b.total_distance / NULLIF(b.total_duration, 0) AND a.trip_count < b.trip_count)
            OR (a.average_speed < b.total_distance / NULLIF(b.total_duration, 0) AND a.trip_count <= b.trip_count)
    )
)
SELECT
    TAXI_ID,
    average_speed,
    trip_count
FROM
    skyline_trips
ORDER BY
    skyline_rank;

/* Outputs:
TAXI_ID     DISTANCE/TIME       TRIPS
"20000089"	9.023102208434343	562
"20000351"	12.30074611830057	365
"20000364"	8.27123127447228	609
"20000393"	13.813952032733503	237
"20000486"	10.276689641459063	419
"20000678"	9.719437232277985	507
 */
 /* QUERY PLAN:
 "Sort  (cost=409413.89..409414.75 rows=346 width=56) (actual time=2873.983..2874.029 rows=6 loops=1)"
"  Sort Key: (row_number() OVER (?))"
"  Sort Method: quicksort  Memory: 25kB"
"  Buffers: shared hit=7707 read=297187 written=4, temp read=37579 written=37681"
"  CTE month_trips"
"    ->  Finalize GroupAggregate  (cost=398544.41..401793.52 rows=438 width=33) (actual time=1744.937..2872.161 rows=428 loops=1)"
"          Group Key: ride_details_geom.taxi_id"
"          Buffers: shared hit=7707 read=297187 written=4, temp read=37579 written=37681"
"          ->  Gather Merge  (cost=398544.41..401780.38 rows=876 width=33) (actual time=1741.249..2871.517 rows=1282 loops=1)"
"                Workers Planned: 2"
"                Workers Launched: 2"
"                Buffers: shared hit=7707 read=297187 written=4, temp read=37579 written=37681"
"                ->  Partial GroupAggregate  (cost=397544.38..400679.24 rows=438 width=33) (actual time=1092.948..2224.944 rows=427 loops=3)"
"                      Group Key: ride_details_geom.taxi_id"
"                      Buffers: shared hit=7707 read=297187 written=4, temp read=37579 written=37681"
"                      ->  Sort  (cost=397544.38..397553.10 rows=3488 width=1259) (actual time=1079.838..1098.275 rows=42650 loops=3)"
"                            Sort Key: ride_details_geom.taxi_id"
"                            Sort Method: external merge  Disk: 50528kB"
"                            Buffers: shared hit=5696 read=296758 written=4, temp read=37579 written=37681"
"                            Worker 0:  Sort Method: external merge  Disk: 49640kB"
"                            Worker 1:  Sort Method: external merge  Disk: 50232kB"
"                            ->  Parallel Bitmap Heap Scan on ride_details_geom  (cost=128.63..395417.65 rows=3488 width=1259) (actual time=7.870..819.801 rows=42650 loops=3)"
"                                  Recheck Cond: (start_point IS NOT NULL)"
"                                  Filter: (EXTRACT(month FROM to_timestamp(st_m(st_startpoint(trajectory)))) = '1'::numeric)"
"                                  Rows Removed by Filter: 515397"
"                                  Heap Blocks: lossy=98939"
"                                  Buffers: shared hit=5625 read=296755 written=4"
"                                  ->  Bitmap Index Scan on idx_start_point  (cost=0.00..126.54 rows=1674141 width=0) (actual time=16.725..16.725 rows=2941430 loops=1)"
"                                        Index Cond: (start_point IS NOT NULL)"
"                                        Buffers: shared hit=15"
"  ->  WindowAgg  (cost=0.00..7605.77 rows=346 width=56) (actual time=2872.677..2873.979 rows=6 loops=1)"
"        Buffers: shared hit=2636 read=100161, temp read=12625 written=12659"
"        ->  Nested Loop Anti Join  (cost=0.00..7599.72 rows=346 width=56) (actual time=2872.670..2873.971 rows=6 loops=1)"
"              Join Filter: ((((month_trips.total_distance / NULLIF(month_trips.total_duration, '0'::double precision)) <= (b.total_distance / NULLIF(b.total_duration, '0'::double precision))) AND (month_trips.trip_count < b.trip_count)) OR (((month_trips.total_distance / NULLIF(month_trips.total_duration, '0'::double precision)) < (b.total_distance / NULLIF(b.total_duration, '0'::double precision))) AND (month_trips.trip_count <= b.trip_count)))"
"              Rows Removed by Join Filter: 13087"
"              Buffers: shared hit=2636 read=100161, temp read=12625 written=12659"
"              ->  CTE Scan on month_trips  (cost=0.00..8.76 rows=438 width=56) (actual time=1744.939..1744.954 rows=428 loops=1)"
"                    Buffers: shared hit=2119 read=100039, temp read=6808 written=12659"
"              ->  CTE Scan on month_trips b  (cost=0.00..8.76 rows=438 width=24) (actual time=0.000..2.635 rows=32 loops=428)"
"                    Buffers: shared hit=517 read=122, temp read=5817"
"Planning:"
"  Buffers: shared hit=17 dirtied=4"
"Planning Time: 0.576 ms"
"Execution Time: 2900.090 ms"
 */

/* Test Case 2.1: For the first case I am choosing the month of January, 2014 */
/* Test Case 2.1 with YOUR_INDEX_METHOD_2 */
DROP INDEX taxi_service.idx_start_point;
CREATE INDEX idx_start_point
ON taxi_service.ride_details_geom
USING SPGIST (START_POINT);


EXPLAIN (ANALYZE ON, BUFFERS ON)
WITH month_trips AS (
    SELECT
        TAXI_ID,
        SUM(ST_Length(TRAJECTORY::geography)) AS total_distance,
        SUM(ST_M(ST_EndPoint(TRAJECTORY)) - ST_M(ST_StartPoint(TRAJECTORY))) AS total_duration,
        COUNT(*) AS trip_count
    FROM
        taxi_service.ride_details_geom
    WHERE
        EXTRACT(MONTH FROM TO_TIMESTAMP(ST_M(ST_StartPoint(TRAJECTORY)))) = 1 -- Input parameter for month number
        AND START_POINT IS NOT NULL 
    GROUP BY
        TAXI_ID
),
skyline_trips AS (
    SELECT
        a.TAXI_ID,
        a.average_speed,
        a.trip_count,
        ROW_NUMBER() OVER () AS skyline_rank
    FROM (
        SELECT
            TAXI_ID,
            total_distance / NULLIF(total_duration, 0) AS average_speed,
            trip_count
        FROM
            month_trips
    ) AS a
    WHERE NOT EXISTS (
        SELECT 1
        FROM
            month_trips AS b
        WHERE
            (a.average_speed <= b.total_distance / NULLIF(b.total_duration, 0) AND a.trip_count < b.trip_count)
            OR (a.average_speed < b.total_distance / NULLIF(b.total_duration, 0) AND a.trip_count <= b.trip_count)
    )
)
SELECT
    TAXI_ID,
    average_speed,
    trip_count
FROM
    skyline_trips
ORDER BY
    skyline_rank;

/* Outputs:
TAXI_ID     DISTANCE/TIME       TRIPS
"20000089"	9.023102208434345	562
"20000351"	12.30074611830057	365
"20000364"	8.271231274472282	609
"20000393"	13.8139520327335	237
"20000486"	10.276689641459063	419
"20000678"	9.719437232277981	507
 */
 /* Outputs:
"Sort  (cost=459659.70..459660.56 rows=346 width=56) (actual time=3087.806..3088.436 rows=6 loops=1)"
"  Sort Key: (row_number() OVER (?))"
"  Sort Method: quicksort  Memory: 25kB"
"  Buffers: shared hit=51238 read=297170 written=9465, temp read=37572 written=37675"
"  CTE month_trips"
"    ->  Finalize GroupAggregate  (cost=448790.22..452039.33 rows=438 width=33) (actual time=1958.393..3086.465 rows=428 loops=1)"
"          Group Key: ride_details_geom.taxi_id"
"          Buffers: shared hit=51238 read=297170 written=9465, temp read=37572 written=37675"
"          ->  Gather Merge  (cost=448790.22..452026.19 rows=876 width=33) (actual time=1956.155..3085.957 rows=1282 loops=1)"
"                Workers Planned: 2"
"                Workers Launched: 2"
"                Buffers: shared hit=51238 read=297170 written=9465, temp read=37572 written=37675"
"                ->  Partial GroupAggregate  (cost=447790.19..450925.05 rows=438 width=33) (actual time=1300.474..2391.540 rows=427 loops=3)"
"                      Group Key: ride_details_geom.taxi_id"
"                      Buffers: shared hit=51238 read=297170 written=9465, temp read=37572 written=37675"
"                      ->  Sort  (cost=447790.19..447798.91 rows=3488 width=1259) (actual time=1288.995..1306.960 rows=42650 loops=3)"
"                            Sort Key: ride_details_geom.taxi_id"
"                            Sort Method: external merge  Disk: 50616kB"
"                            Buffers: shared hit=49390 read=296758 written=9465, temp read=37572 written=37675"
"                            Worker 0:  Sort Method: external merge  Disk: 49368kB"
"                            Worker 1:  Sort Method: external merge  Disk: 50376kB"
"                            ->  Parallel Bitmap Heap Scan on ride_details_geom  (cost=50374.44..445663.46 rows=3488 width=1259) (actual time=117.156..1011.043 rows=42650 loops=3)"
"                                  Recheck Cond: (start_point IS NOT NULL)"
"                                  Filter: (EXTRACT(month FROM to_timestamp(st_m(st_startpoint(trajectory)))) = '1'::numeric)"
"                                  Rows Removed by Filter: 515397"
"                                  Heap Blocks: exact=21540 lossy=78306"
"                                  Buffers: shared hit=49319 read=296755 written=9465"
"                                  ->  Bitmap Index Scan on idx_start_point  (cost=0.00..50372.34 rows=1674141 width=0) (actual time=132.445..132.445 rows=1674141 loops=1)"
"                                        Index Cond: (start_point IS NOT NULL)"
"                                        Buffers: shared hit=43709"
"  ->  WindowAgg  (cost=0.00..7605.77 rows=346 width=56) (actual time=3086.553..3087.799 rows=6 loops=1)"
"        Buffers: shared hit=46158 read=100872 written=3693, temp read=12648 written=12682"
"        ->  Nested Loop Anti Join  (cost=0.00..7599.72 rows=346 width=56) (actual time=3086.550..3087.795 rows=6 loops=1)"
"              Join Filter: ((((month_trips.total_distance / NULLIF(month_trips.total_duration, '0'::double precision)) <= (b.total_distance / NULLIF(b.total_duration, '0'::double precision))) AND (month_trips.trip_count < b.trip_count)) OR (((month_trips.total_distance / NULLIF(month_trips.total_duration, '0'::double precision)) < (b.total_distance / NULLIF(b.total_duration, '0'::double precision))) AND (month_trips.trip_count <= b.trip_count)))"
"              Rows Removed by Join Filter: 13087"
"              Buffers: shared hit=46158 read=100872 written=3693, temp read=12648 written=12682"
"              ->  CTE Scan on month_trips  (cost=0.00..8.76 rows=438 width=56) (actual time=1958.395..1958.415 rows=428 loops=1)"
"                    Buffers: shared hit=45665 read=100756 written=3693, temp read=6819 written=12682"
"              ->  CTE Scan on month_trips b  (cost=0.00..8.76 rows=438 width=24) (actual time=0.000..2.636 rows=32 loops=428)"
"                    Buffers: shared hit=493 read=116, temp read=5829"
"Planning:"
"  Buffers: shared hit=17"
"Planning Time: 0.586 ms"
"Execution Time: 3089.764 ms"
 */

 /* Test Case 2.1: For the first case I am choosing the month of January, 2014 */
/* Test Case 2.1 with YOUR_INDEX_METHOD_3 */
DROP INDEX taxi_service.idx_start_point;
CREATE INDEX idx_start_point
ON taxi_service.ride_details_geom
USING GIST (START_POINT);


EXPLAIN (ANALYZE ON, BUFFERS ON)
WITH month_trips AS (
    SELECT
        TAXI_ID,
        SUM(ST_Length(TRAJECTORY::geography)) AS total_distance,
        SUM(ST_M(ST_EndPoint(TRAJECTORY)) - ST_M(ST_StartPoint(TRAJECTORY))) AS total_duration,
        COUNT(*) AS trip_count
    FROM
        taxi_service.ride_details_geom
    WHERE
        EXTRACT(MONTH FROM TO_TIMESTAMP(ST_M(ST_StartPoint(TRAJECTORY)))) = 1 -- Input parameter for month number
        AND START_POINT IS NOT NULL 
    GROUP BY
        TAXI_ID
),
skyline_trips AS (
    SELECT
        a.TAXI_ID,
        a.average_speed,
        a.trip_count,
        ROW_NUMBER() OVER () AS skyline_rank
    FROM (
        SELECT
            TAXI_ID,
            total_distance / NULLIF(total_duration, 0) AS average_speed,
            trip_count
        FROM
            month_trips
    ) AS a
    WHERE NOT EXISTS (
        SELECT 1
        FROM
            month_trips AS b
        WHERE
            (a.average_speed <= b.total_distance / NULLIF(b.total_duration, 0) AND a.trip_count < b.trip_count)
            OR (a.average_speed < b.total_distance / NULLIF(b.total_duration, 0) AND a.trip_count <= b.trip_count)
    )
)
SELECT
    TAXI_ID,
    average_speed,
    trip_count
FROM
    skyline_trips
ORDER BY
    skyline_rank;

/* Outputs:
TAXI_ID     DISTANCE/TIME       TRIPS
"20000089"	9.023102208434345	562
"20000351"	12.300746118300568	365
"20000364"	8.271231274472283	609
"20000393"	13.8139520327335	237
"20000486"	10.276689641459066	419
"20000678"	9.719437232277985	507
 */
 /* Outputs:
"Sort  (cost=456067.70..456068.56 rows=346 width=56) (actual time=4410.457..4411.036 rows=6 loops=1)"
"  Sort Key: (row_number() OVER (?))"
"  Sort Method: quicksort  Memory: 25kB"
"  Buffers: shared hit=10749 read=302692, temp read=37576 written=37679"
"  CTE month_trips"
"    ->  Finalize GroupAggregate  (cost=445198.22..448447.33 rows=438 width=33) (actual time=3347.726..4409.196 rows=428 loops=1)"
"          Group Key: ride_details_geom.taxi_id"
"          Buffers: shared hit=10749 read=302692, temp read=37576 written=37679"
"          ->  Gather Merge  (cost=445198.22..448434.19 rows=876 width=33) (actual time=3344.896..4408.683 rows=1282 loops=1)"
"                Workers Planned: 2"
"                Workers Launched: 2"
"                Buffers: shared hit=10749 read=302692, temp read=37576 written=37679"
"                ->  Partial GroupAggregate  (cost=444198.19..447333.05 rows=438 width=33) (actual time=2612.242..3731.368 rows=427 loops=3)"
"                      Group Key: ride_details_geom.taxi_id"
"                      Buffers: shared hit=10749 read=302692, temp read=37576 written=37679"
"                      ->  Sort  (cost=444198.19..444206.91 rows=3488 width=1259) (actual time=2598.080..2617.938 rows=42650 loops=3)"
"                            Sort Key: ride_details_geom.taxi_id"
"                            Sort Method: external merge  Disk: 49888kB"
"                            Buffers: shared hit=8732 read=302263, temp read=37576 written=37679"
"                            Worker 0:  Sort Method: external merge  Disk: 51232kB"
"                            Worker 1:  Sort Method: external merge  Disk: 49256kB"
"                            ->  Parallel Bitmap Heap Scan on ride_details_geom  (cost=46782.44..442071.46 rows=3488 width=1259) (actual time=506.499..2242.318 rows=42650 loops=3)"
"                                  Recheck Cond: (start_point IS NOT NULL)"
"                                  Filter: (EXTRACT(month FROM to_timestamp(st_m(st_startpoint(trajectory)))) = '1'::numeric)"
"                                  Rows Removed by Filter: 515397"
"                                  Heap Blocks: exact=20924 lossy=77144"
"                                  Buffers: shared hit=8658 read=302263"
"                                  ->  Bitmap Index Scan on idx_start_point  (cost=0.00..46780.34 rows=1674141 width=0) (actual time=520.504..520.505 rows=1674141 loops=1)"
"                                        Index Cond: (start_point IS NOT NULL)"
"                                        Buffers: shared read=8556"
"  ->  WindowAgg  (cost=0.00..7605.77 rows=346 width=56) (actual time=4409.170..4410.437 rows=6 loops=1)"
"        Buffers: shared hit=3377 read=106589, temp read=12468 written=12502"
"        ->  Nested Loop Anti Join  (cost=0.00..7599.72 rows=346 width=56) (actual time=4409.167..4410.432 rows=6 loops=1)"
"              Join Filter: ((((month_trips.total_distance / NULLIF(month_trips.total_duration, '0'::double precision)) <= (b.total_distance / NULLIF(b.total_duration, '0'::double precision))) AND (month_trips.trip_count < b.trip_count)) OR (((month_trips.total_distance / NULLIF(month_trips.total_duration, '0'::double precision)) < (b.total_distance / NULLIF(b.total_duration, '0'::double precision))) AND (month_trips.trip_count <= b.trip_count)))"
"              Rows Removed by Join Filter: 13087"
"              Buffers: shared hit=3377 read=106589, temp read=12468 written=12502"
"              ->  CTE Scan on month_trips  (cost=0.00..8.76 rows=438 width=56) (actual time=3347.728..3347.742 rows=428 loops=1)"
"                    Buffers: shared hit=2877 read=106480, temp read=6728 written=12502"
"              ->  CTE Scan on month_trips b  (cost=0.00..8.76 rows=438 width=24) (actual time=0.000..2.480 rows=32 loops=428)"
"                    Buffers: shared hit=500 read=109, temp read=5740"
"Planning Time: 0.372 ms"
"Execution Time: 4412.223 ms"
 */


 /* Test Case 2.2: For the second case I am choosing the month of Feburary, 2014 */
/* Test Case 2.2 with YOUR_INDEX_METHOD_1 */
DROP INDEX taxi_service.idx_start_point;
CREATE INDEX idx_start_point
ON taxi_service.ride_details_geom
USING SPGIST (START_POINT);



EXPLAIN (ANALYZE ON, BUFFERS ON)
WITH month_trips AS (
    SELECT
        TAXI_ID,
        SUM(ST_Length(TRAJECTORY::geography)) AS total_distance,
        SUM(ST_M(ST_EndPoint(TRAJECTORY)) - ST_M(ST_StartPoint(TRAJECTORY))) AS total_duration,
        COUNT(*) AS trip_count
    FROM
        taxi_service.ride_details_geom
    WHERE
        EXTRACT(MONTH FROM TO_TIMESTAMP(ST_M(ST_StartPoint(TRAJECTORY)))) = 2 -- Input parameter for month number
        AND START_POINT IS NOT NULL 
    GROUP BY
        TAXI_ID
),
skyline_trips AS (
    SELECT
        a.TAXI_ID,
        a.average_speed,
        a.trip_count,
        ROW_NUMBER() OVER () AS skyline_rank
    FROM (
        SELECT
            TAXI_ID,
            total_distance / NULLIF(total_duration, 0) AS average_speed,
            trip_count
        FROM
            month_trips
    ) AS a
    WHERE NOT EXISTS (
        SELECT 1
        FROM
            month_trips AS b
        WHERE
            (a.average_speed <= b.total_distance / NULLIF(b.total_duration, 0) AND a.trip_count < b.trip_count)
            OR (a.average_speed < b.total_distance / NULLIF(b.total_duration, 0) AND a.trip_count <= b.trip_count)
    )
)
SELECT
    TAXI_ID,
    average_speed,
    trip_count
FROM
    skyline_trips
ORDER BY
    skyline_rank;


/* Outputs:
TAXI_ID     DISTANCE/TIME       TRIPS
"20000089"	9.12814189366627	438
"20000263"	8.877623617222786	500
"20000351"	13.799723179280894	345
"20000364"	8.703061231169823	558
"20000525"	9.737709111271135	422
"20000579"	14.503915009134268	53
"20000663"	7.84004416350011	620
"20000678"	9.09452103534932	492
 */
 /* QUERY PLAN:
"Sort  (cost=459611.70..459612.56 rows=346 width=56) (actual time=3008.545..3009.045 rows=8 loops=1)"
"  Sort Key: (row_number() OVER (?))"
"  Sort Method: quicksort  Memory: 25kB"
"  Buffers: shared hit=50846 read=297161 written=9453, temp read=37071 written=37173"
"  CTE month_trips"
"    ->  Finalize GroupAggregate  (cost=448742.22..451991.33 rows=438 width=33) (actual time=1855.427..3007.058 rows=433 loops=1)"
"          Group Key: ride_details_geom.taxi_id"
"          Buffers: shared hit=50846 read=297161 written=9453, temp read=37071 written=37173"
"          ->  Gather Merge  (cost=448742.22..451978.19 rows=876 width=33) (actual time=1852.301..3006.309 rows=1299 loops=1)"
"                Workers Planned: 2"
"                Workers Launched: 2"
"                Buffers: shared hit=50846 read=297161 written=9453, temp read=37071 written=37173"
"                ->  Partial GroupAggregate  (cost=447742.19..450877.05 rows=438 width=33) (actual time=1207.423..2314.487 rows=433 loops=3)"
"                      Group Key: ride_details_geom.taxi_id"
"                      Buffers: shared hit=50846 read=297161 written=9453, temp read=37071 written=37173"
"                      ->  Sort  (cost=447742.19..447750.91 rows=3488 width=1259) (actual time=1195.458..1216.574 rows=41956 loops=3)"
"                            Sort Key: ride_details_geom.taxi_id"
"                            Sort Method: external merge  Disk: 50456kB"
"                            Buffers: shared hit=49061 read=296758 written=9453, temp read=37071 written=37173"
"                            Worker 0:  Sort Method: external merge  Disk: 49320kB"
"                            Worker 1:  Sort Method: external merge  Disk: 48600kB"
"                            ->  Parallel Bitmap Heap Scan on ride_details_geom  (cost=50326.44..445615.46 rows=3488 width=1259) (actual time=111.857..920.167 rows=41956 loops=3)"
"                                  Recheck Cond: (start_point IS NOT NULL)"
"                                  Filter: (EXTRACT(month FROM to_timestamp(st_m(st_startpoint(trajectory)))) = '2'::numeric)"
"                                  Rows Removed by Filter: 516091"
"                                  Heap Blocks: exact=21256 lossy=78460"
"                                  Buffers: shared hit=48990 read=296755 written=9453"
"                                  ->  Bitmap Index Scan on idx_start_point  (cost=0.00..50324.34 rows=1674141 width=0) (actual time=120.094..120.094 rows=1674141 loops=1)"
"                                        Index Cond: (start_point IS NOT NULL)"
"                                        Buffers: shared hit=43380"
"  ->  WindowAgg  (cost=0.00..7605.77 rows=346 width=56) (actual time=3007.369..3008.541 rows=8 loops=1)"
"        Buffers: shared hit=45746 read=100700 written=3218, temp read=12607 written=12642"
"        ->  Nested Loop Anti Join  (cost=0.00..7599.72 rows=346 width=56) (actual time=3007.367..3008.537 rows=8 loops=1)"
"              Join Filter: ((((month_trips.total_distance / NULLIF(month_trips.total_duration, '0'::double precision)) <= (b.total_distance / NULLIF(b.total_duration, '0'::double precision))) AND (month_trips.trip_count < b.trip_count)) OR (((month_trips.total_distance / NULLIF(month_trips.total_duration, '0'::double precision)) < (b.total_distance / NULLIF(b.total_duration, '0'::double precision))) AND (month_trips.trip_count <= b.trip_count)))"
"              Rows Removed by Join Filter: 13366"
"              Buffers: shared hit=45746 read=100700 written=3218, temp read=12607 written=12642"
"              ->  CTE Scan on month_trips  (cost=0.00..8.76 rows=438 width=56) (actual time=1855.428..1855.446 rows=433 loops=1)"
"                    Buffers: shared hit=45269 read=100592 written=3218, temp read=6799 written=12642"
"              ->  CTE Scan on month_trips b  (cost=0.00..8.76 rows=438 width=24) (actual time=0.000..2.660 rows=32 loops=433)"
"                    Buffers: shared hit=477 read=108, temp read=5808"
"Planning:"
"  Buffers: shared hit=6"
"Planning Time: 0.174 ms"
"Execution Time: 3029.388 ms"
 */

/* Test Case 2.2: For the second case I am choosing the month of Feburary, 2014 */
/* Test Case 2.2 with YOUR_INDEX_METHOD_2 */
DROP INDEX taxi_service.idx_start_point;
CREATE INDEX idx_start_point
ON taxi_service.ride_details_geom
USING GIST (START_POINT);



EXPLAIN (ANALYZE ON, BUFFERS ON)
WITH month_trips AS (
    SELECT
        TAXI_ID,
        SUM(ST_Length(TRAJECTORY::geography)) AS total_distance,
        SUM(ST_M(ST_EndPoint(TRAJECTORY)) - ST_M(ST_StartPoint(TRAJECTORY))) AS total_duration,
        COUNT(*) AS trip_count
    FROM
        taxi_service.ride_details_geom
    WHERE
        EXTRACT(MONTH FROM TO_TIMESTAMP(ST_M(ST_StartPoint(TRAJECTORY)))) = 2 -- Input parameter for month number
        AND START_POINT IS NOT NULL 
    GROUP BY
        TAXI_ID
),
skyline_trips AS (
    SELECT
        a.TAXI_ID,
        a.average_speed,
        a.trip_count,
        ROW_NUMBER() OVER () AS skyline_rank
    FROM (
        SELECT
            TAXI_ID,
            total_distance / NULLIF(total_duration, 0) AS average_speed,
            trip_count
        FROM
            month_trips
    ) AS a
    WHERE NOT EXISTS (
        SELECT 1
        FROM
            month_trips AS b
        WHERE
            (a.average_speed <= b.total_distance / NULLIF(b.total_duration, 0) AND a.trip_count < b.trip_count)
            OR (a.average_speed < b.total_distance / NULLIF(b.total_duration, 0) AND a.trip_count <= b.trip_count)
    )
)
SELECT
    TAXI_ID,
    average_speed,
    trip_count
FROM
    skyline_trips
ORDER BY
    skyline_rank;

/* Outputs:
TAXI_ID     DISTANCE/TIME       TRIPS
"20000089"	9.12814189366627	438
"20000263"	8.87762361722279	500
"20000351"	13.799723179280898	345
"20000364"	8.703061231169826	558
"20000525"	9.737709111271135	422
"20000579"	14.503915009134268	53
"20000663"	7.840044163500105	620
"20000678"	9.09452103534932	492
 */
 /* Outputs:
"Sort  (cost=456067.70..456068.56 rows=346 width=56) (actual time=2522.971..2523.481 rows=8 loops=1)"
"  Sort Key: (row_number() OVER (?))"
"  Sort Method: quicksort  Memory: 25kB"
"  Buffers: shared hit=7627 read=305742 written=13, temp read=37063 written=37166"
"  CTE month_trips"
"    ->  Finalize GroupAggregate  (cost=445198.22..448447.33 rows=438 width=33) (actual time=1556.912..2521.970 rows=433 loops=1)"
"          Group Key: ride_details_geom.taxi_id"
"          Buffers: shared hit=7627 read=305742 written=13, temp read=37063 written=37166"
"          ->  Gather Merge  (cost=445198.22..448434.19 rows=876 width=33) (actual time=1554.926..2521.754 rows=1299 loops=1)"
"                Workers Planned: 2"
"                Workers Launched: 2"
"                Buffers: shared hit=7627 read=305742 written=13, temp read=37063 written=37166"
"                ->  Partial GroupAggregate  (cost=444198.19..447333.05 rows=438 width=33) (actual time=966.626..1932.528 rows=433 loops=3)"
"                      Group Key: ride_details_geom.taxi_id"
"                      Buffers: shared hit=7627 read=305742 written=13, temp read=37063 written=37166"
"                      ->  Sort  (cost=444198.19..444206.91 rows=3488 width=1259) (actual time=952.357..965.958 rows=41956 loops=3)"
"                            Sort Key: ride_details_geom.taxi_id"
"                            Sort Method: external merge  Disk: 49744kB"
"                            Buffers: shared hit=5673 read=305322 written=13, temp read=37063 written=37166"
"                            Worker 0:  Sort Method: external merge  Disk: 49360kB"
"                            Worker 1:  Sort Method: external merge  Disk: 49208kB"
"                            ->  Parallel Bitmap Heap Scan on ride_details_geom  (cost=46782.44..442071.46 rows=3488 width=1259) (actual time=70.219..713.150 rows=41956 loops=3)"
"                                  Recheck Cond: (start_point IS NOT NULL)"
"                                  Filter: (EXTRACT(month FROM to_timestamp(st_m(st_startpoint(trajectory)))) = '2'::numeric)"
"                                  Rows Removed by Filter: 516091"
"                                  Heap Blocks: exact=21236 lossy=77961"
"                                  Buffers: shared hit=5602 read=305319 written=13"
"                                  ->  Bitmap Index Scan on idx_start_point  (cost=0.00..46780.34 rows=1674141 width=0) (actual time=78.299..78.299 rows=1674141 loops=1)"
"                                        Index Cond: (start_point IS NOT NULL)"
"                                        Buffers: shared read=8556"
"  ->  WindowAgg  (cost=0.00..7605.77 rows=346 width=56) (actual time=2521.790..2522.969 rows=8 loops=1)"
"        Buffers: shared hit=2139 read=108711 written=3, temp read=12433 written=12468"
"        ->  Nested Loop Anti Join  (cost=0.00..7599.72 rows=346 width=56) (actual time=2521.788..2522.964 rows=8 loops=1)"
"              Join Filter: ((((month_trips.total_distance / NULLIF(month_trips.total_duration, '0'::double precision)) <= (b.total_distance / NULLIF(b.total_duration, '0'::double precision))) AND (month_trips.trip_count < b.trip_count)) OR (((month_trips.total_distance / NULLIF(month_trips.total_duration, '0'::double precision)) < (b.total_distance / NULLIF(b.total_duration, '0'::double precision))) AND (month_trips.trip_count <= b.trip_count)))"
"              Rows Removed by Join Filter: 13366"
"              Buffers: shared hit=2139 read=108711 written=3, temp read=12433 written=12468"
"              ->  CTE Scan on month_trips  (cost=0.00..8.76 rows=438 width=56) (actual time=1556.913..1556.930 rows=433 loops=1)"
"                    Buffers: shared hit=1811 read=108631 written=3, temp read=6710 written=12468"
"              ->  CTE Scan on month_trips b  (cost=0.00..8.76 rows=438 width=24) (actual time=0.000..2.229 rows=32 loops=433)"
"                    Buffers: shared hit=328 read=80, temp read=5723"
"Planning:"
"  Buffers: shared hit=5"
"Planning Time: 0.173 ms"
"Execution Time: 2545.883 ms"
 */

 /* Test Case 2.2: For the second case I am choosing the month of Feburary, 2014 */
/* Test Case 2.2 with YOUR_INDEX_METHOD_3 */
DROP INDEX taxi_service.idx_start_point;
CREATE INDEX idx_start_point
ON taxi_service.ride_details_geom
USING BRIN (START_POINT);



EXPLAIN (ANALYZE ON, BUFFERS ON)
WITH month_trips AS (
    SELECT
        TAXI_ID,
        SUM(ST_Length(TRAJECTORY::geography)) AS total_distance,
        SUM(ST_M(ST_EndPoint(TRAJECTORY)) - ST_M(ST_StartPoint(TRAJECTORY))) AS total_duration,
        COUNT(*) AS trip_count
    FROM
        taxi_service.ride_details_geom
    WHERE
        EXTRACT(MONTH FROM TO_TIMESTAMP(ST_M(ST_StartPoint(TRAJECTORY)))) = 2 -- Input parameter for month number
        AND START_POINT IS NOT NULL 
    GROUP BY
        TAXI_ID
),
skyline_trips AS (
    SELECT
        a.TAXI_ID,
        a.average_speed,
        a.trip_count,
        ROW_NUMBER() OVER () AS skyline_rank
    FROM (
        SELECT
            TAXI_ID,
            total_distance / NULLIF(total_duration, 0) AS average_speed,
            trip_count
        FROM
            month_trips
    ) AS a
    WHERE NOT EXISTS (
        SELECT 1
        FROM
            month_trips AS b
        WHERE
            (a.average_speed <= b.total_distance / NULLIF(b.total_duration, 0) AND a.trip_count < b.trip_count)
            OR (a.average_speed < b.total_distance / NULLIF(b.total_duration, 0) AND a.trip_count <= b.trip_count)
    )
)
SELECT
    TAXI_ID,
    average_speed,
    trip_count
FROM
    skyline_trips
ORDER BY
    skyline_rank;

/* Outputs:
TAXI_ID     DISTANCE/TIME       TRIPS
"20000089"	9.12814189366627	438
"20000263"	8.877623617222788	500
"20000351"	13.799723179280896	345
"20000364"	8.703061231169826	558
"20000525"	9.737709111271135	422
"20000579"	14.503915009134271	53
"20000663"	7.840044163500108	620
"20000678"	9.094521035349318	492
 */
 /* Outputs:
"Sort  (cost=409413.89..409414.75 rows=346 width=56) (actual time=2940.468..2940.527 rows=8 loops=1)"
"  Sort Key: (row_number() OVER (?))"
"  Sort Method: quicksort  Memory: 25kB"
"  Buffers: shared hit=7623 read=297199 written=3, temp read=37065 written=37168"
"  CTE month_trips"
"    ->  Finalize GroupAggregate  (cost=398544.41..401793.52 rows=438 width=33) (actual time=1838.805..2938.645 rows=433 loops=1)"
"          Group Key: ride_details_geom.taxi_id"
"          Buffers: shared hit=7623 read=297199 written=3, temp read=37065 written=37168"
"          ->  Gather Merge  (cost=398544.41..401780.38 rows=876 width=33) (actual time=1836.917..2938.051 rows=1299 loops=1)"
"                Workers Planned: 2"
"                Workers Launched: 2"
"                Buffers: shared hit=7623 read=297199 written=3, temp read=37065 written=37168"
"                ->  Partial GroupAggregate  (cost=397544.38..400679.24 rows=438 width=33) (actual time=1180.379..2313.410 rows=433 loops=3)"
"                      Group Key: ride_details_geom.taxi_id"
"                      Buffers: shared hit=7623 read=297199 written=3, temp read=37065 written=37168"
"                      ->  Sort  (cost=397544.38..397553.10 rows=3488 width=1259) (actual time=1167.629..1186.809 rows=41956 loops=3)"
"                            Sort Key: ride_details_geom.taxi_id"
"                            Sort Method: external merge  Disk: 48528kB"
"                            Buffers: shared hit=5675 read=296779 written=3, temp read=37065 written=37168"
"                            Worker 0:  Sort Method: external merge  Disk: 50376kB"
"                            Worker 1:  Sort Method: external merge  Disk: 49432kB"
"                            ->  Parallel Bitmap Heap Scan on ride_details_geom  (cost=128.63..395417.65 rows=3488 width=1259) (actual time=6.237..872.494 rows=41956 loops=3)"
"                                  Recheck Cond: (start_point IS NOT NULL)"
"                                  Filter: (EXTRACT(month FROM to_timestamp(st_m(st_startpoint(trajectory)))) = '2'::numeric)"
"                                  Rows Removed by Filter: 516091"
"                                  Heap Blocks: lossy=96167"
"                                  Buffers: shared hit=5604 read=296776 written=3"
"                                  ->  Bitmap Index Scan on idx_start_point  (cost=0.00..126.54 rows=1674141 width=0) (actual time=17.040..17.040 rows=2941430 loops=1)"
"                                        Index Cond: (start_point IS NOT NULL)"
"                                        Buffers: shared hit=3 read=12"
"  ->  WindowAgg  (cost=0.00..7605.77 rows=346 width=56) (actual time=2939.308..2940.463 rows=8 loops=1)"
"        Buffers: shared hit=2604 read=97312, temp read=12126 written=12159"
"        ->  Nested Loop Anti Join  (cost=0.00..7599.72 rows=346 width=56) (actual time=2939.306..2940.459 rows=8 loops=1)"
"              Join Filter: ((((month_trips.total_distance / NULLIF(month_trips.total_duration, '0'::double precision)) <= (b.total_distance / NULLIF(b.total_duration, '0'::double precision))) AND (month_trips.trip_count < b.trip_count)) OR (((month_trips.total_distance / NULLIF(month_trips.total_duration, '0'::double precision)) < (b.total_distance / NULLIF(b.total_duration, '0'::double precision))) AND (month_trips.trip_count <= b.trip_count)))"
"              Rows Removed by Join Filter: 13366"
"              Buffers: shared hit=2604 read=97312, temp read=12126 written=12159"
"              ->  CTE Scan on month_trips  (cost=0.00..8.76 rows=438 width=56) (actual time=1838.807..1838.822 rows=433 loops=1)"
"                    Buffers: shared hit=2086 read=97191, temp read=6558 written=12159"
"              ->  CTE Scan on month_trips b  (cost=0.00..8.76 rows=438 width=24) (actual time=0.000..2.541 rows=32 loops=433)"
"                    Buffers: shared hit=518 read=121, temp read=5568"
"Planning:"
"  Buffers: shared hit=14 read=2 dirtied=3"
"Planning Time: 0.558 ms"
"Execution Time: 2957.907 ms"
 */


/* Test Case 2.3: For the third case I am choosing the month of March, 2014 */
/* Test Case 2.3 with YOUR_INDEX_METHOD_1 */
DROP INDEX taxi_service.idx_start_point;
CREATE INDEX idx_start_point
ON taxi_service.ride_details_geom
USING BRIN (START_POINT);



EXPLAIN (ANALYZE ON, BUFFERS ON)
WITH month_trips AS (
    SELECT
        TAXI_ID,
        SUM(ST_Length(TRAJECTORY::geography)) AS total_distance,
        SUM(ST_M(ST_EndPoint(TRAJECTORY)) - ST_M(ST_StartPoint(TRAJECTORY))) AS total_duration,
        COUNT(*) AS trip_count
    FROM
        taxi_service.ride_details_geom
    WHERE
        EXTRACT(MONTH FROM TO_TIMESTAMP(ST_M(ST_StartPoint(TRAJECTORY)))) = 3 -- Input parameter for month number
        AND START_POINT IS NOT NULL 
    GROUP BY
        TAXI_ID
),
skyline_trips AS (
    SELECT
        a.TAXI_ID,
        a.average_speed,
        a.trip_count,
        ROW_NUMBER() OVER () AS skyline_rank
    FROM (
        SELECT
            TAXI_ID,
            total_distance / NULLIF(total_duration, 0) AS average_speed,
            trip_count
        FROM
            month_trips
    ) AS a
    WHERE NOT EXISTS (
        SELECT 1
        FROM
            month_trips AS b
        WHERE
            (a.average_speed <= b.total_distance / NULLIF(b.total_duration, 0) AND a.trip_count < b.trip_count)
            OR (a.average_speed < b.total_distance / NULLIF(b.total_duration, 0) AND a.trip_count <= b.trip_count)
    )
)
SELECT
    TAXI_ID,
    average_speed,
    trip_count
FROM
    skyline_trips
ORDER BY
    skyline_rank;

/* Outputs:
TAXI_ID     DISTANCE/TIME       TRIPS
"20000066"	7.410680182361063	929
"20000089"	9.470528328173506	583
"20000140"	9.837295769153164	491
"20000351"	12.485831579293974	381
"20000364"	8.483117480486825	632
"20000393"	13.474648937052352	216
"20000525"	9.989932886431708	414
"20000658"	10.777144507220186	386
 */
 /* QUERY PLAN:
"Sort  (cost=409413.89..409414.75 rows=346 width=56) (actual time=3188.656..3188.685 rows=8 loops=1)"
"  Sort Key: (row_number() OVER (?))"
"  Sort Method: quicksort  Memory: 25kB"
"  Buffers: shared hit=7601 read=297179, temp read=39811 written=39921"
"  CTE month_trips"
"    ->  Finalize GroupAggregate  (cost=398544.41..401793.52 rows=438 width=33) (actual time=2031.380..3187.021 rows=435 loops=1)"
"          Group Key: ride_details_geom.taxi_id"
"          Buffers: shared hit=7601 read=297179, temp read=39811 written=39921"
"          ->  Gather Merge  (cost=398544.41..401780.38 rows=876 width=33) (actual time=2027.218..3186.383 rows=1302 loops=1)"
"                Workers Planned: 2"
"                Workers Launched: 2"
"                Buffers: shared hit=7601 read=297179, temp read=39811 written=39921"
"                ->  Partial GroupAggregate  (cost=397544.38..400679.24 rows=438 width=33) (actual time=1296.946..2490.631 rows=434 loops=3)"
"                      Group Key: ride_details_geom.taxi_id"
"                      Buffers: shared hit=7601 read=297179, temp read=39811 written=39921"
"                      ->  Sort  (cost=397544.38..397553.10 rows=3488 width=1259) (actual time=1281.600..1303.114 rows=45644 loops=3)"
"                            Sort Key: ride_details_geom.taxi_id"
"                            Sort Method: external merge  Disk: 53008kB"
"                            Buffers: shared hit=5676 read=296778, temp read=39811 written=39921"
"                            Worker 0:  Sort Method: external merge  Disk: 53568kB"
"                            Worker 1:  Sort Method: external merge  Disk: 52752kB"
"                            ->  Parallel Bitmap Heap Scan on ride_details_geom  (cost=128.63..395417.65 rows=3488 width=1259) (actual time=9.129..982.241 rows=45644 loops=3)"
"                                  Recheck Cond: (start_point IS NOT NULL)"
"                                  Filter: (EXTRACT(month FROM to_timestamp(st_m(st_startpoint(trajectory)))) = '3'::numeric)"
"                                  Rows Removed by Filter: 512403"
"                                  Heap Blocks: lossy=97960"
"                                  Buffers: shared hit=5605 read=296775"
"                                  ->  Bitmap Index Scan on idx_start_point  (cost=0.00..126.54 rows=1674141 width=0) (actual time=18.384..18.385 rows=2941430 loops=1)"
"                                        Index Cond: (start_point IS NOT NULL)"
"                                        Buffers: shared hit=3 read=12"
"  ->  WindowAgg  (cost=0.00..7605.77 rows=346 width=56) (actual time=3187.687..3188.648 rows=8 loops=1)"
"        Buffers: shared hit=2668 read=99213, temp read=13246 written=13283"
"        ->  Nested Loop Anti Join  (cost=0.00..7599.72 rows=346 width=56) (actual time=3187.684..3188.643 rows=8 loops=1)"
"              Join Filter: ((((month_trips.total_distance / NULLIF(month_trips.total_duration, '0'::double precision)) <= (b.total_distance / NULLIF(b.total_duration, '0'::double precision))) AND (month_trips.trip_count < b.trip_count)) OR (((month_trips.total_distance / NULLIF(month_trips.total_duration, '0'::double precision)) < (b.total_distance / NULLIF(b.total_duration, '0'::double precision))) AND (month_trips.trip_count <= b.trip_count)))"
"              Rows Removed by Join Filter: 10389"
"              Buffers: shared hit=2668 read=99213, temp read=13246 written=13283"
"              ->  CTE Scan on month_trips  (cost=0.00..8.76 rows=438 width=56) (actual time=2031.382..2031.397 rows=435 loops=1)"
"                    Buffers: shared hit=2133 read=99094, temp read=7118 written=13283"
"              ->  CTE Scan on month_trips b  (cost=0.00..8.76 rows=438 width=24) (actual time=0.000..2.658 rows=25 loops=435)"
"                    Buffers: shared hit=535 read=119, temp read=6128"
"Planning:"
"  Buffers: shared hit=1"
"Planning Time: 0.321 ms"
"Execution Time: 3214.100 ms"
 */

/* Test Case 2.3: For the third case I am choosing the month of March, 2014*/
/* Test Case 2.3 with YOUR_INDEX_METHOD_2 */
DROP INDEX taxi_service.idx_start_point;
CREATE INDEX idx_start_point
ON taxi_service.ride_details_geom
USING SPGIST (START_POINT);



EXPLAIN (ANALYZE ON, BUFFERS ON)
WITH month_trips AS (
    SELECT
        TAXI_ID,
        SUM(ST_Length(TRAJECTORY::geography)) AS total_distance,
        SUM(ST_M(ST_EndPoint(TRAJECTORY)) - ST_M(ST_StartPoint(TRAJECTORY))) AS total_duration,
        COUNT(*) AS trip_count
    FROM
        taxi_service.ride_details_geom
    WHERE
        EXTRACT(MONTH FROM TO_TIMESTAMP(ST_M(ST_StartPoint(TRAJECTORY)))) = 3 -- Input parameter for month number
        AND START_POINT IS NOT NULL 
    GROUP BY
        TAXI_ID
),
skyline_trips AS (
    SELECT
        a.TAXI_ID,
        a.average_speed,
        a.trip_count,
        ROW_NUMBER() OVER () AS skyline_rank
    FROM (
        SELECT
            TAXI_ID,
            total_distance / NULLIF(total_duration, 0) AS average_speed,
            trip_count
        FROM
            month_trips
    ) AS a
    WHERE NOT EXISTS (
        SELECT 1
        FROM
            month_trips AS b
        WHERE
            (a.average_speed <= b.total_distance / NULLIF(b.total_duration, 0) AND a.trip_count < b.trip_count)
            OR (a.average_speed < b.total_distance / NULLIF(b.total_duration, 0) AND a.trip_count <= b.trip_count)
    )
)
SELECT
    TAXI_ID,
    average_speed,
    trip_count
FROM
    skyline_trips
ORDER BY
    skyline_rank;

/* Outputs:
TAXI_ID     DISTANCE/TIME       TRIPS
"20000066"	7.4106801823610615	929
"20000089"	9.470528328173508	583
"20000140"	9.837295769153167	491
"20000351"	12.485831579293972	381
"20000364"	8.483117480486822	632
"20000393"	13.474648937052352	216
"20000525"	9.98993288643171	414
"20000658"	10.777144507220186	386
 */
 /* Outputs:
"Sort  (cost=459623.70..459624.56 rows=346 width=56) (actual time=3280.904..3281.375 rows=8 loops=1)"
"  Sort Key: (row_number() OVER (?))"
"  Sort Method: quicksort  Memory: 25kB"
"  Buffers: shared hit=50976 read=297160 written=9369, temp read=39811 written=39920"
"  CTE month_trips"
"    ->  Finalize GroupAggregate  (cost=448754.22..452003.33 rows=438 width=33) (actual time=2115.778..3279.787 rows=435 loops=1)"
"          Group Key: ride_details_geom.taxi_id"
"          Buffers: shared hit=50976 read=297160 written=9369, temp read=39811 written=39920"
"          ->  Gather Merge  (cost=448754.22..451990.19 rows=876 width=33) (actual time=2112.972..3279.221 rows=1301 loops=1)"
"                Workers Planned: 2"
"                Workers Launched: 2"
"                Buffers: shared hit=50976 read=297160 written=9369, temp read=39811 written=39920"
"                ->  Partial GroupAggregate  (cost=447754.19..450889.05 rows=438 width=33) (actual time=1428.487..2586.037 rows=434 loops=3)"
"                      Group Key: ride_details_geom.taxi_id"
"                      Buffers: shared hit=50976 read=297160 written=9369, temp read=39811 written=39920"
"                      ->  Sort  (cost=447754.19..447762.91 rows=3488 width=1259) (actual time=1410.868..1429.842 rows=45644 loops=3)"
"                            Sort Key: ride_details_geom.taxi_id"
"                            Sort Method: external merge  Disk: 53024kB"
"                            Buffers: shared hit=49229 read=296781 written=9369, temp read=39811 written=39920"
"                            Worker 0:  Sort Method: external merge  Disk: 53480kB"
"                            Worker 1:  Sort Method: external merge  Disk: 52816kB"
"                            ->  Parallel Bitmap Heap Scan on ride_details_geom  (cost=50338.44..445627.46 rows=3488 width=1259) (actual time=124.598..1104.173 rows=45644 loops=3)"
"                                  Recheck Cond: (start_point IS NOT NULL)"
"                                  Filter: (EXTRACT(month FROM to_timestamp(st_m(st_startpoint(trajectory)))) = '3'::numeric)"
"                                  Rows Removed by Filter: 512403"
"                                  Heap Blocks: exact=20922 lossy=77551"
"                                  Buffers: shared hit=49165 read=296781 written=9369"
"                                  ->  Bitmap Index Scan on idx_start_point  (cost=0.00..50336.34 rows=1674141 width=0) (actual time=134.922..134.922 rows=1674141 loops=1)"
"                                        Index Cond: (start_point IS NOT NULL)"
"                                        Buffers: shared hit=43591"
"  ->  WindowAgg  (cost=0.00..7605.77 rows=346 width=56) (actual time=3279.896..3280.896 rows=8 loops=1)"
"        Buffers: shared hit=45872 read=99466 written=3210, temp read=13249 written=13286"
"        ->  Nested Loop Anti Join  (cost=0.00..7599.72 rows=346 width=56) (actual time=3279.893..3280.890 rows=8 loops=1)"
"              Join Filter: ((((month_trips.total_distance / NULLIF(month_trips.total_duration, '0'::double precision)) <= (b.total_distance / NULLIF(b.total_duration, '0'::double precision))) AND (month_trips.trip_count < b.trip_count)) OR (((month_trips.total_distance / NULLIF(month_trips.total_duration, '0'::double precision)) < (b.total_distance / NULLIF(b.total_duration, '0'::double precision))) AND (month_trips.trip_count <= b.trip_count)))"
"              Rows Removed by Join Filter: 10389"
"              Buffers: shared hit=45872 read=99466 written=3210, temp read=13249 written=13286"
"              ->  CTE Scan on month_trips  (cost=0.00..8.76 rows=438 width=56) (actual time=2115.779..2115.796 rows=435 loops=1)"
"                    Buffers: shared hit=45452 read=99379 written=3210, temp read=7120 written=13286"
"              ->  CTE Scan on month_trips b  (cost=0.00..8.76 rows=438 width=24) (actual time=0.000..2.676 rows=25 loops=435)"
"                    Buffers: shared hit=420 read=87, temp read=6129"
"Planning:"
"  Buffers: shared hit=17"
"Planning Time: 0.438 ms"
"Execution Time: 3304.670 ms"
 */

/* Test Case 2.3: For the third case I am choosing the month of March, 2014 */
/* Test Case 2.3 with YOUR_INDEX_METHOD_3 */
DROP INDEX taxi_service.idx_start_point;
CREATE INDEX idx_start_point
ON taxi_service.ride_details_geom
USING GIST (START_POINT);


EXPLAIN (ANALYZE ON, BUFFERS ON)
WITH month_trips AS (
    SELECT
        TAXI_ID,
        SUM(ST_Length(TRAJECTORY::geography)) AS total_distance,
        SUM(ST_M(ST_EndPoint(TRAJECTORY)) - ST_M(ST_StartPoint(TRAJECTORY))) AS total_duration,
        COUNT(*) AS trip_count
    FROM
        taxi_service.ride_details_geom
    WHERE
        EXTRACT(MONTH FROM TO_TIMESTAMP(ST_M(ST_StartPoint(TRAJECTORY)))) = 3 -- Input parameter for month number
        AND START_POINT IS NOT NULL 
    GROUP BY
        TAXI_ID
),
skyline_trips AS (
    SELECT
        a.TAXI_ID,
        a.average_speed,
        a.trip_count,
        ROW_NUMBER() OVER () AS skyline_rank
    FROM (
        SELECT
            TAXI_ID,
            total_distance / NULLIF(total_duration, 0) AS average_speed,
            trip_count
        FROM
            month_trips
    ) AS a
    WHERE NOT EXISTS (
        SELECT 1
        FROM
            month_trips AS b
        WHERE
            (a.average_speed <= b.total_distance / NULLIF(b.total_duration, 0) AND a.trip_count < b.trip_count)
            OR (a.average_speed < b.total_distance / NULLIF(b.total_duration, 0) AND a.trip_count <= b.trip_count)
    )
)
SELECT
    TAXI_ID,
    average_speed,
    trip_count
FROM
    skyline_trips
ORDER BY
    skyline_rank;

/* Outputs:
TAXI_ID     DISTANCE/TIME       TRIPS
"20000066"	7.4106801823610615	929
"20000089"	9.470528328173506	583
"20000140"	9.837295769153167	491
"20000351"	12.485831579293974	381
"20000364"	8.483117480486818	632
"20000393"	13.474648937052352	216
"20000525"	9.98993288643171	414
"20000658"	10.777144507220182	386
 */
 /* Outputs:
"Sort  (cost=456067.70..456068.56 rows=346 width=56) (actual time=2932.575..2933.444 rows=8 loops=1)"
"  Sort Key: (row_number() OVER (?))"
"  Sort Method: quicksort  Memory: 25kB"
"  Buffers: shared hit=7541 read=305736 written=48, temp read=39808 written=39918"
"  CTE month_trips"
"    ->  Finalize GroupAggregate  (cost=445198.22..448447.33 rows=438 width=33) (actual time=1836.595..2931.849 rows=435 loops=1)"
"          Group Key: ride_details_geom.taxi_id"
"          Buffers: shared hit=7541 read=305736 written=48, temp read=39808 written=39918"
"          ->  Gather Merge  (cost=445198.22..448434.19 rows=876 width=33) (actual time=1830.975..2931.290 rows=1300 loops=1)"
"                Workers Planned: 2"
"                Workers Launched: 2"
"                Buffers: shared hit=7541 read=305736 written=48, temp read=39808 written=39918"
"                ->  Partial GroupAggregate  (cost=444198.19..447333.05 rows=438 width=33) (actual time=1130.148..2280.667 rows=433 loops=3)"
"                      Group Key: ride_details_geom.taxi_id"
"                      Buffers: shared hit=7541 read=305736 written=48, temp read=39808 written=39918"
"                      ->  Sort  (cost=444198.19..444206.91 rows=3488 width=1259) (actual time=1119.608..1138.058 rows=45644 loops=3)"
"                            Sort Key: ride_details_geom.taxi_id"
"                            Sort Method: external merge  Disk: 52960kB"
"                            Buffers: shared hit=5635 read=305340 written=48, temp read=39808 written=39918"
"                            Worker 0:  Sort Method: external merge  Disk: 52608kB"
"                            Worker 1:  Sort Method: external merge  Disk: 53736kB"
"                            ->  Parallel Bitmap Heap Scan on ride_details_geom  (cost=46782.44..442071.46 rows=3488 width=1259) (actual time=70.505..825.499 rows=45644 loops=3)"
"                                  Recheck Cond: (start_point IS NOT NULL)"
"                                  Filter: (EXTRACT(month FROM to_timestamp(st_m(st_startpoint(trajectory)))) = '3'::numeric)"
"                                  Rows Removed by Filter: 512403"
"                                  Heap Blocks: exact=21088 lossy=76843"
"                                  Buffers: shared hit=5574 read=305337 written=48"
"                                  ->  Bitmap Index Scan on idx_start_point  (cost=0.00..46780.34 rows=1674141 width=0) (actual time=72.352..72.352 rows=1674141 loops=1)"
"                                        Index Cond: (start_point IS NOT NULL)"
"                                        Buffers: shared read=8556"
"  ->  WindowAgg  (cost=0.00..7605.77 rows=346 width=56) (actual time=2931.512..2932.571 rows=8 loops=1)"
"        Buffers: shared hit=2443 read=107520 written=16, temp read=13233 written=13269"
"        ->  Nested Loop Anti Join  (cost=0.00..7599.72 rows=346 width=56) (actual time=2931.509..2932.566 rows=8 loops=1)"
"              Join Filter: ((((month_trips.total_distance / NULLIF(month_trips.total_duration, '0'::double precision)) <= (b.total_distance / NULLIF(b.total_duration, '0'::double precision))) AND (month_trips.trip_count < b.trip_count)) OR (((month_trips.total_distance / NULLIF(month_trips.total_duration, '0'::double precision)) < (b.total_distance / NULLIF(b.total_duration, '0'::double precision))) AND (month_trips.trip_count <= b.trip_count)))"
"              Rows Removed by Join Filter: 10389"
"              Buffers: shared hit=2443 read=107520 written=16, temp read=13233 written=13269"
"              ->  CTE Scan on month_trips  (cost=0.00..8.76 rows=438 width=56) (actual time=1836.596..1836.613 rows=435 loops=1)"
"                    Buffers: shared hit=1968 read=107422 written=16, temp read=7112 written=13269"
"              ->  CTE Scan on month_trips b  (cost=0.00..8.76 rows=438 width=24) (actual time=0.000..2.517 rows=25 loops=435)"
"                    Buffers: shared hit=475 read=98, temp read=6121"
"Planning:"
"  Buffers: shared hit=5"
"Planning Time: 0.165 ms"
"Execution Time: 2954.959 ms"
 */


/* 
Query Task 3:
I wanted to know how many rides that start from nearly the same point end up being the most similar. So I selected the first
trip from a month of trips and selected the rides that have their starting point as close as 10m and similar to the 
first selected ride. The top 10 trips with the most similarity were selected. I have used the ST_HausdorffDistance
to compute the similarity.
*/

/* Test Case 3.1: For the first case I have selected the first trip for the month of January  */
/* Test Case 3.1 with YOUR_INDEX_METHOD_1 */
DROP INDEX taxi_service.idx_start_point;
CREATE INDEX idx_start_point
ON taxi_service.ride_details_geom
USING GIST (START_POINT);

EXPLAIN (ANALYZE ON, BUFFERS ON)

WITH month_trajectory AS (
    SELECT 
        TIMESTAMP,
        START_POINT,
        TRIP_ID AS trajectory_id,
        TRAJECTORY
    FROM 
        taxi_service.ride_details_geom
    WHERE 
        EXTRACT(month FROM TIMESTAMP) = 1 
    ORDER BY 
        TIMESTAMP 
    LIMIT 1
)


SELECT 
    r.trajectory_id AS random_trip_id,
    t.TRIP_ID AS other_trip_id,
	ST_HausdorffDistance(r.TRAJECTORY, t.TRAJECTORY) AS similarity
    
FROM 
    month_trajectory r
JOIN
    taxi_service.ride_details_geom t
ON
	r.trajectory_id <> t.TRIP_ID AND
	ST_DWithin(r.START_POINT, t.START_POINT, 10)
ORDER BY 
    similarity
LIMIT 10; 

/* Outputs:
FIRST_TRIP_ID          SIMILAR_TRIP_ID         SIMILARTY
"1388498403620000186"	"1377868498620000186"	0.002049225109507747
"1388498403620000186"	"1398815137620000338"	0.0020915974009171148
"1388498403620000186"	"1378120117620000507"	0.0032371796623197105
"1388498403620000186"	"1389794768620000167"	0.003937847127558077
"1388498403620000186"	"1387963322620000668"	0.003957647028222943
"1388498403620000186"	"1373641747620000167"	0.003973120310285468
"1388498403620000186"	"1390319246620000602"	0.003980178136720296
"1388498403620000186"	"1378997154620000031"	0.003980178136720296
"1388498403620000186"	"1391094570620000602"	0.003994621383812523
"1388498403620000186"	"1396365219620000602"	0.003997834038575385
 */
 /* QUERY PLAN:
"Limit  (cost=10000329350.07..10000329350.09 rows=10 width=48) (actual time=44192.221..44192.255 rows=10 loops=1)"
"  Buffers: shared hit=122702 read=1862201 written=10"
"  ->  Sort  (cost=10000329350.07..10000329354.25 rows=1674 width=48) (actual time=44192.220..44192.254 rows=10 loops=1)"
"        Sort Key: (st_hausdorffdistance(ride_details_geom.trajectory, t.trajectory))"
"        Sort Method: top-N heapsort  Memory: 26kB"
"        Buffers: shared hit=122702 read=1862201 written=10"
"        ->  Nested Loop  (cost=10000305624.26..10000329313.89 rows=1674 width=48) (actual time=823.707..44047.815 rows=1674139 loops=1)"
"              Buffers: shared hit=122702 read=1862201 written=10"
"              ->  Limit  (cost=10000305623.85..10000305623.96 rows=1 width=1318) (actual time=823.243..823.277 rows=1 loops=1)"
"                    Buffers: shared hit=16165 read=278090"
"                    ->  Gather Merge  (cost=10000305623.85..10000306437.77 rows=6976 width=1318) (actual time=823.243..823.276 rows=1 loops=1)"
"                          Workers Planned: 2"
"                          Workers Launched: 2"
"                          Buffers: shared hit=16165 read=278090"
"                          ->  Sort  (cost=10000304623.82..10000304632.54 rows=3488 width=1318) (actual time=806.717..806.717 rows=1 loops=3)"
"                                Sort Key: ride_details_geom.""timestamp"""
"                                Sort Method: top-N heapsort  Memory: 31kB"
"                                Buffers: shared hit=16165 read=278090"
"                                Worker 0:  Sort Method: top-N heapsort  Memory: 30kB"
"                                Worker 1:  Sort Method: top-N heapsort  Memory: 28kB"
"                                ->  Parallel Seq Scan on ride_details_geom  (cost=10000000000.00..10000304606.38 rows=3488 width=1318) (actual time=0.094..796.823 rows=42650 loops=3)"
"                                      Filter: (EXTRACT(month FROM ""timestamp"") = '1'::numeric)"
"                                      Rows Removed by Filter: 515397"
"                                      Buffers: shared hit=16060 read=278083"
"              ->  Index Scan using idx_start_point on ride_details_geom t  (cost=0.41..2763.25 rows=167 width=1310) (actual time=0.093..5333.740 rows=1674139 loops=1)"
"                    Index Cond: (start_point && st_expand(ride_details_geom.start_point, '10'::double precision))"
"                    Filter: (((ride_details_geom.trip_id)::text <> (trip_id)::text) AND st_dwithin(ride_details_geom.start_point, start_point, '10'::double precision))"
"                    Rows Removed by Filter: 2"
"                    Buffers: shared hit=103656 read=1578850 written=10"
"Planning:"
"  Buffers: shared hit=4 read=1"
"Planning Time: 0.508 ms"
"Execution Time: 44192.286 ms"
 */

/* Test Case 3.1: For the first case I have selected the first trip for the month of January */
/* Test Case 3.1 with YOUR_INDEX_METHOD_2 */
DROP INDEX taxi_service.idx_start_point;
CREATE INDEX idx_start_point
ON taxi_service.ride_details_geom
USING SPGIST (START_POINT);

EXPLAIN (ANALYZE ON, BUFFERS ON)

WITH month_trajectory AS (
    SELECT 
        TIMESTAMP,
        START_POINT,
        TRIP_ID AS trajectory_id,
        TRAJECTORY
    FROM 
        taxi_service.ride_details_geom
    WHERE 
        EXTRACT(month FROM TIMESTAMP) = 1 
    ORDER BY 
        TIMESTAMP 
    LIMIT 1
)


SELECT 
    r.trajectory_id AS random_trip_id,
    t.TRIP_ID AS other_trip_id,
	ST_HausdorffDistance(r.TRAJECTORY, t.TRAJECTORY) AS similarity
    
FROM 
    month_trajectory r
JOIN
    taxi_service.ride_details_geom t
ON
	r.trajectory_id <> t.TRIP_ID AND
	ST_DWithin(r.START_POINT, t.START_POINT, 10)
ORDER BY 
    similarity
LIMIT 10; 

/* Outputs:
FIRST_TRIP_ID          SIMILAR_TRIP_ID         SIMILARTY
"1388498403620000186"	"1377868498620000186"	0.002049225109507747
"1388498403620000186"	"1398815137620000338"	0.0020915974009171148
"1388498403620000186"	"1378120117620000507"	0.0032371796623197105
"1388498403620000186"	"1389794768620000167"	0.003937847127558077
"1388498403620000186"	"1387963322620000668"	0.003957647028222943
"1388498403620000186"	"1373641747620000167"	0.003973120310285468
"1388498403620000186"	"1378997154620000031"	0.003980178136720296
"1388498403620000186"	"1390319246620000602"	0.003980178136720296
"1388498403620000186"	"1391094570620000602"	0.003994621383812523
"1388498403620000186"	"1396365219620000602"	0.003997834038575385
 */
 /* Outputs:
"Limit  (cost=10000329350.07..10000329350.09 rows=10 width=48) (actual time=42525.719..42525.761 rows=10 loops=1)"
"  Buffers: shared hit=136120 read=1890315 written=8990"
"  ->  Sort  (cost=10000329350.07..10000329354.25 rows=1674 width=48) (actual time=42525.718..42525.761 rows=10 loops=1)"
"        Sort Key: (st_hausdorffdistance(ride_details_geom.trajectory, t.trajectory))"
"        Sort Method: top-N heapsort  Memory: 26kB"
"        Buffers: shared hit=136120 read=1890315 written=8990"
"        ->  Nested Loop  (cost=10000305624.26..10000329313.89 rows=1674 width=48) (actual time=265.871..42362.339 rows=1674139 loops=1)"
"              Buffers: shared hit=136120 read=1890315 written=8990"
"              ->  Limit  (cost=10000305623.85..10000305623.96 rows=1 width=1318) (actual time=265.774..265.816 rows=1 loops=1)"
"                    Buffers: shared hit=6685 read=287570"
"                    ->  Gather Merge  (cost=10000305623.85..10000306437.77 rows=6976 width=1318) (actual time=265.774..265.816 rows=1 loops=1)"
"                          Workers Planned: 2"
"                          Workers Launched: 2"
"                          Buffers: shared hit=6685 read=287570"
"                          ->  Sort  (cost=10000304623.82..10000304632.54 rows=3488 width=1318) (actual time=253.971..253.971 rows=1 loops=3)"
"                                Sort Key: ride_details_geom.""timestamp"""
"                                Sort Method: top-N heapsort  Memory: 28kB"
"                                Buffers: shared hit=6685 read=287570"
"                                Worker 0:  Sort Method: top-N heapsort  Memory: 26kB"
"                                Worker 1:  Sort Method: top-N heapsort  Memory: 26kB"
"                                ->  Parallel Seq Scan on ride_details_geom  (cost=10000000000.00..10000304606.38 rows=3488 width=1318) (actual time=0.030..247.536 rows=42650 loops=3)"
"                                      Filter: (EXTRACT(month FROM ""timestamp"") = '1'::numeric)"
"                                      Rows Removed by Filter: 515397"
"                                      Buffers: shared hit=6580 read=287563"
"              ->  Index Scan using idx_start_point on ride_details_geom t  (cost=0.41..2763.25 rows=167 width=1310) (actual time=0.078..4020.690 rows=1674139 loops=1)"
"                    Index Cond: (start_point && st_expand(ride_details_geom.start_point, '10'::double precision))"
"                    Filter: (((ride_details_geom.trip_id)::text <> (trip_id)::text) AND st_dwithin(ride_details_geom.start_point, start_point, '10'::double precision))"
"                    Rows Removed by Filter: 2"
"                    Buffers: shared hit=126520 read=1597518 written=8956"
"Planning:"
"  Buffers: shared hit=5 read=1"
"Planning Time: 0.417 ms"
"Execution Time: 42525.814 ms"
 */

 /* Test Case 3.1: For the first case I have selected the first trip for the month of January */
/* Test Case 3.1 with YOUR_INDEX_METHOD_3 */
DROP INDEX taxi_service.idx_start_point;
CREATE INDEX idx_start_point
ON taxi_service.ride_details_geom
USING BRIN (START_POINT);

EXPLAIN (ANALYZE ON, BUFFERS ON)

WITH month_trajectory AS (
    SELECT 
        TIMESTAMP,
        START_POINT,
        TRIP_ID AS trajectory_id,
        TRAJECTORY
    FROM 
        taxi_service.ride_details_geom
    WHERE 
        EXTRACT(month FROM TIMESTAMP) = 1 
    ORDER BY 
        TIMESTAMP 
    LIMIT 1
)


SELECT 
    r.trajectory_id AS random_trip_id,
    t.TRIP_ID AS other_trip_id,
	ST_HausdorffDistance(r.TRAJECTORY, t.TRAJECTORY) AS similarity
    
FROM 
    month_trajectory r
JOIN
    taxi_service.ride_details_geom t
ON
	r.trajectory_id <> t.TRIP_ID AND
	ST_DWithin(r.START_POINT, t.START_POINT, 10)
ORDER BY 
    similarity
LIMIT 10; 

/* Outputs:
FIRST_TRIP_ID          SIMILAR_TRIP_ID         SIMILARTY
"1388498403620000186"	"1377868498620000186"	0.002049225109507747
"1388498403620000186"	"1398815137620000338"	0.0020915974009171148
"1388498403620000186"	"1378120117620000507"	0.0032371796623197105
"1388498403620000186"	"1389794768620000167"	0.003937847127558077
"1388498403620000186"	"1387963322620000668"	0.003957647028222943
"1388498403620000186"	"1373641747620000167"	0.003973120310285468
"1388498403620000186"	"1390319246620000602"	0.003980178136720296
"1388498403620000186"	"1378997154620000031"	0.003980178136720296
"1388498403620000186"	"1391094570620000602"	0.003994621383812523
"1388498403620000186"	"1396365219620000602"	0.003997834038575385
 */
 /* Outputs:
"Limit  (cost=10000695988.13..10000695988.16 rows=10 width=48) (actual time=40008.585..40008.626 rows=10 loops=1)"
"  Buffers: shared hit=21260 read=575295 written=1"
"  ->  Sort  (cost=10000695988.13..10000695992.32 rows=1674 width=48) (actual time=40008.584..40008.624 rows=10 loops=1)"
"        Sort Key: (st_hausdorffdistance(ride_details_geom.trajectory, t.trajectory))"
"        Sort Method: top-N heapsort  Memory: 26kB"
"        Buffers: shared hit=21260 read=575295 written=1"
"        ->  Nested Loop  (cost=10000305678.05..10000695951.96 rows=1674 width=48) (actual time=431.504..39867.664 rows=1674139 loops=1)"
"              Buffers: shared hit=21260 read=575295 written=1"
"              ->  Limit  (cost=10000305623.85..10000305623.96 rows=1 width=1318) (actual time=420.785..420.825 rows=1 loops=1)"
"                    Buffers: shared hit=15993 read=278262"
"                    ->  Gather Merge  (cost=10000305623.85..10000306437.77 rows=6976 width=1318) (actual time=420.785..420.824 rows=1 loops=1)"
"                          Workers Planned: 2"
"                          Workers Launched: 2"
"                          Buffers: shared hit=15993 read=278262"
"                          ->  Sort  (cost=10000304623.82..10000304632.54 rows=3488 width=1318) (actual time=407.190..407.191 rows=1 loops=3)"
"                                Sort Key: ride_details_geom.""timestamp"""
"                                Sort Method: top-N heapsort  Memory: 31kB"
"                                Buffers: shared hit=15993 read=278262"
"                                Worker 0:  Sort Method: top-N heapsort  Memory: 28kB"
"                                Worker 1:  Sort Method: top-N heapsort  Memory: 28kB"
"                                ->  Parallel Seq Scan on ride_details_geom  (cost=10000000000.00..10000304606.38 rows=3488 width=1318) (actual time=0.038..395.456 rows=42650 loops=3)"
"                                      Filter: (EXTRACT(month FROM ""timestamp"") = '1'::numeric)"
"                                      Rows Removed by Filter: 515397"
"                                      Buffers: shared hit=15888 read=278255"
"              ->  Bitmap Heap Scan on ride_details_geom t  (cost=54.21..369401.31 rows=167 width=1310) (actual time=7.609..962.645 rows=1674139 loops=1)"
"                    Filter: (((ride_details_geom.trip_id)::text <> (trip_id)::text) AND st_dwithin(ride_details_geom.start_point, start_point, '10'::double precision))"
"                    Rows Removed by Filter: 2"
"                    Heap Blocks: lossy=294143"
"                    Buffers: shared hit=54 read=294104 written=1"
"                    ->  Bitmap Index Scan on idx_start_point  (cost=0.00..54.17 rows=23746 width=0) (actual time=7.496..7.496 rows=2941430 loops=1)"
"                          Index Cond: (start_point && st_expand(ride_details_geom.start_point, '10'::double precision))"
"                          Buffers: shared hit=15"
"Planning:"
"  Buffers: shared hit=5 read=1"
"Planning Time: 0.700 ms"
"Execution Time: 40008.650 ms"
 */


 /* Test Case 3.2: For the second case I have selected the first trip for the month of FEB */
/* Test Case 3.2 with YOUR_INDEX_METHOD_1 */
DROP INDEX taxi_service.idx_start_point;
CREATE INDEX idx_start_point
ON taxi_service.ride_details_geom
USING BRIN (START_POINT);

EXPLAIN (ANALYZE ON, BUFFERS ON)

WITH month_trajectory AS (
    SELECT 
        TIMESTAMP,
        START_POINT,
        TRIP_ID AS trajectory_id,
        TRAJECTORY
    FROM 
        taxi_service.ride_details_geom
    WHERE 
        EXTRACT(month FROM TIMESTAMP) = 2
    ORDER BY 
        TIMESTAMP 
    LIMIT 1
)


SELECT 
    r.trajectory_id AS random_trip_id,
    t.TRIP_ID AS other_trip_id,
	ST_HausdorffDistance(r.TRAJECTORY, t.TRAJECTORY) AS similarity
    
FROM 
    month_trajectory r
JOIN
    taxi_service.ride_details_geom t
ON
	r.trajectory_id <> t.TRIP_ID AND
	ST_DWithin(r.START_POINT, t.START_POINT, 10)
ORDER BY 
    similarity
LIMIT 10; 

/* Outputs:
FIRST_TRIP_ID          SIMILAR_TRIP_ID         SIMILARTY
"1391176841620000184"	"1389882237620000184"	0.001070659609776331
"1391176841620000184"	"1391004488620000184"	0.0012852365540997259
"1391176841620000184"	"1393636619620000392"	0.0015768503416622782
"1391176841620000184"	"1391781689620000224"	0.0016751850644042955
"1391176841620000184"	"1389362355620000184"	0.001795765018036384
"1391176841620000184"	"1391092103620000184"	0.001904622009747618
"1391176841620000184"	"1392299322620000224"	0.0019931495177246176
"1391176841620000184"	"1389808735620000398"	0.001998445896192042
"1391176841620000184"	"1390572244620000184"	0.00202629958297917
"1391176841620000184"	"1397355920620000525"	0.0021490071094511175
 */
 /* QUERY PLAN:
"Limit  (cost=10000695988.13..10000695988.16 rows=10 width=48) (actual time=68294.127..68294.178 rows=10 loops=1)"
"  Buffers: shared hit=21389 read=575166 written=10"
"  ->  Sort  (cost=10000695988.13..10000695992.32 rows=1674 width=48) (actual time=68294.126..68294.175 rows=10 loops=1)"
"        Sort Key: (st_hausdorffdistance(ride_details_geom.trajectory, t.trajectory))"
"        Sort Method: top-N heapsort  Memory: 26kB"
"        Buffers: shared hit=21389 read=575166 written=10"
"        ->  Nested Loop  (cost=10000305678.05..10000695951.96 rows=1674 width=48) (actual time=307.015..68157.109 rows=1674139 loops=1)"
"              Buffers: shared hit=21389 read=575166 written=10"
"              ->  Limit  (cost=10000305623.85..10000305623.96 rows=1 width=1318) (actual time=295.260..295.309 rows=1 loops=1)"
"                    Buffers: shared hit=16171 read=278084"
"                    ->  Gather Merge  (cost=10000305623.85..10000306437.77 rows=6976 width=1318) (actual time=295.260..295.309 rows=1 loops=1)"
"                          Workers Planned: 2"
"                          Workers Launched: 2"
"                          Buffers: shared hit=16171 read=278084"
"                          ->  Sort  (cost=10000304623.82..10000304632.54 rows=3488 width=1318) (actual time=284.621..284.621 rows=1 loops=3)"
"                                Sort Key: ride_details_geom.""timestamp"""
"                                Sort Method: top-N heapsort  Memory: 29kB"
"                                Buffers: shared hit=16171 read=278084"
"                                Worker 0:  Sort Method: top-N heapsort  Memory: 29kB"
"                                Worker 1:  Sort Method: top-N heapsort  Memory: 30kB"
"                                ->  Parallel Seq Scan on ride_details_geom  (cost=10000000000.00..10000304606.38 rows=3488 width=1318) (actual time=0.036..277.379 rows=41956 loops=3)"
"                                      Filter: (EXTRACT(month FROM ""timestamp"") = '2'::numeric)"
"                                      Rows Removed by Filter: 516091"
"                                      Buffers: shared hit=16066 read=278077"
"              ->  Bitmap Heap Scan on ride_details_geom t  (cost=54.21..369401.31 rows=167 width=1310) (actual time=7.604..1064.436 rows=1674139 loops=1)"
"                    Filter: (((ride_details_geom.trip_id)::text <> (trip_id)::text) AND st_dwithin(ride_details_geom.start_point, start_point, '10'::double precision))"
"                    Rows Removed by Filter: 2"
"                    Heap Blocks: lossy=294143"
"                    Buffers: shared hit=15 read=294143 written=10"
"                    ->  Bitmap Index Scan on idx_start_point  (cost=0.00..54.17 rows=23746 width=0) (actual time=7.413..7.413 rows=2941430 loops=1)"
"                          Index Cond: (start_point && st_expand(ride_details_geom.start_point, '10'::double precision))"
"                          Buffers: shared hit=15"
"Planning:"
"  Buffers: shared hit=5 read=1"
"Planning Time: 0.691 ms"
"Execution Time: 68294.200 ms"
 */

/* Test Case 3.2: For the second case I have selected the first trip for the month of FEB */
/* Test Case 3.2 with YOUR_INDEX_METHOD_2 */
DROP INDEX taxi_service.idx_start_point;
CREATE INDEX idx_start_point
ON taxi_service.ride_details_geom
USING SPGIST (START_POINT);

EXPLAIN (ANALYZE ON, BUFFERS ON)

WITH month_trajectory AS (
    SELECT 
        TIMESTAMP,
        START_POINT,
        TRIP_ID AS trajectory_id,
        TRAJECTORY
    FROM 
        taxi_service.ride_details_geom
    WHERE 
        EXTRACT(month FROM TIMESTAMP) = 2 
    ORDER BY 
        TIMESTAMP 
    LIMIT 1
)


SELECT 
    r.trajectory_id AS random_trip_id,
    t.TRIP_ID AS other_trip_id,
	ST_HausdorffDistance(r.TRAJECTORY, t.TRAJECTORY) AS similarity
    
FROM 
    month_trajectory r
JOIN
    taxi_service.ride_details_geom t
ON
	r.trajectory_id <> t.TRIP_ID AND
	ST_DWithin(r.START_POINT, t.START_POINT, 10)
ORDER BY 
    similarity
LIMIT 10; 

/* Outputs:
FIRST_TRIP_ID          SIMILAR_TRIP_ID         SIMILARTY
"1391176841620000184"	"1389882237620000184"	0.001070659609776331
"1391176841620000184"	"1391004488620000184"	0.0012852365540997259
"1391176841620000184"	"1393636619620000392"	0.0015768503416622782
"1391176841620000184"	"1391781689620000224"	0.0016751850644042955
"1391176841620000184"	"1389362355620000184"	0.001795765018036384
"1391176841620000184"	"1391092103620000184"	0.001904622009747618
"1391176841620000184"	"1392299322620000224"	0.0019931495177246176
"1391176841620000184"	"1389808735620000398"	0.001998445896192042
"1391176841620000184"	"1390572244620000184"	0.00202629958297917
"1391176841620000184"	"1397355920620000525"	0.0021490071094511175
 */
 /* Outputs:
"Limit  (cost=10000329350.07..10000329350.09 rows=10 width=48) (actual time=72291.087..72291.134 rows=10 loops=1)"
"  Buffers: shared hit=136433 read=1890080 written=8848"
"  ->  Sort  (cost=10000329350.07..10000329354.25 rows=1674 width=48) (actual time=72291.086..72291.133 rows=10 loops=1)"
"        Sort Key: (st_hausdorffdistance(ride_details_geom.trajectory, t.trajectory))"
"        Sort Method: top-N heapsort  Memory: 26kB"
"        Buffers: shared hit=136433 read=1890080 written=8848"
"        ->  Nested Loop  (cost=10000305624.26..10000329313.89 rows=1674 width=48) (actual time=291.432..72144.379 rows=1674139 loops=1)"
"              Buffers: shared hit=136433 read=1890080 written=8848"
"              ->  Limit  (cost=10000305623.85..10000305623.96 rows=1 width=1318) (actual time=291.166..291.212 rows=1 loops=1)"
"                    Buffers: shared hit=6790 read=287465"
"                    ->  Gather Merge  (cost=10000305623.85..10000306437.77 rows=6976 width=1318) (actual time=291.166..291.212 rows=1 loops=1)"
"                          Workers Planned: 2"
"                          Workers Launched: 2"
"                          Buffers: shared hit=6790 read=287465"
"                          ->  Sort  (cost=10000304623.82..10000304632.54 rows=3488 width=1318) (actual time=265.313..265.314 rows=1 loops=3)"
"                                Sort Key: ride_details_geom.""timestamp"""
"                                Sort Method: top-N heapsort  Memory: 29kB"
"                                Buffers: shared hit=6790 read=287465"
"                                Worker 0:  Sort Method: top-N heapsort  Memory: 29kB"
"                                Worker 1:  Sort Method: top-N heapsort  Memory: 29kB"
"                                ->  Parallel Seq Scan on ride_details_geom  (cost=10000000000.00..10000304606.38 rows=3488 width=1318) (actual time=0.033..259.228 rows=41956 loops=3)"
"                                      Filter: (EXTRACT(month FROM ""timestamp"") = '2'::numeric)"
"                                      Rows Removed by Filter: 516091"
"                                      Buffers: shared hit=6685 read=287458"
"              ->  Index Scan using idx_start_point on ride_details_geom t  (cost=0.41..2763.25 rows=167 width=1310) (actual time=0.055..5398.574 rows=1674139 loops=1)"
"                    Index Cond: (start_point && st_expand(ride_details_geom.start_point, '10'::double precision))"
"                    Filter: (((ride_details_geom.trip_id)::text <> (trip_id)::text) AND st_dwithin(ride_details_geom.start_point, start_point, '10'::double precision))"
"                    Rows Removed by Filter: 2"
"                    Buffers: shared hit=126747 read=1597369 written=8836"
"Planning:"
"  Buffers: shared hit=3 read=4 dirtied=2"
"Planning Time: 4.700 ms"
"Execution Time: 72291.200 ms"
 */

 /* Test Case 3.2: For the second case I have selected the first trip for the month of FEB */
/* Test Case 3.2 with YOUR_INDEX_METHOD_3 */
DROP INDEX taxi_service.idx_start_point;
CREATE INDEX idx_start_point
ON taxi_service.ride_details_geom
USING GIST (START_POINT);

EXPLAIN (ANALYZE ON, BUFFERS ON)

WITH month_trajectory AS (
    SELECT 
        TIMESTAMP,
        START_POINT,
        TRIP_ID AS trajectory_id,
        TRAJECTORY
    FROM 
        taxi_service.ride_details_geom
    WHERE 
        EXTRACT(month FROM TIMESTAMP) = 2 
    ORDER BY 
        TIMESTAMP 
    LIMIT 1
)


SELECT 
    r.trajectory_id AS random_trip_id,
    t.TRIP_ID AS other_trip_id,
	ST_HausdorffDistance(r.TRAJECTORY, t.TRAJECTORY) AS similarity
    
FROM 
    month_trajectory r
JOIN
    taxi_service.ride_details_geom t
ON
	r.trajectory_id <> t.TRIP_ID AND
	ST_DWithin(r.START_POINT, t.START_POINT, 10)
ORDER BY 
    similarity
LIMIT 10; 

/* Outputs:
FIRST_TRIP_ID          SIMILAR_TRIP_ID         SIMILARTY
"1391176841620000184"	"1389882237620000184"	0.001070659609776331
"1391176841620000184"	"1391004488620000184"	0.0012852365540997259
"1391176841620000184"	"1393636619620000392"	0.0015768503416622782
"1391176841620000184"	"1391781689620000224"	0.0016751850644042955
"1391176841620000184"	"1389362355620000184"	0.001795765018036384
"1391176841620000184"	"1391092103620000184"	0.001904622009747618
"1391176841620000184"	"1392299322620000224"	0.0019931495177246176
"1391176841620000184"	"1389808735620000398"	0.001998445896192042
"1391176841620000184"	"1390572244620000184"	0.00202629958297917
"1391176841620000184"	"1397355920620000525"	0.0021490071094511175
 */
 /* Outputs:
"Limit  (cost=10000329350.07..10000329350.09 rows=10 width=48) (actual time=74345.281..74345.311 rows=10 loops=1)"
"  Buffers: shared hit=122443 read=1862460 written=1"
"  ->  Sort  (cost=10000329350.07..10000329354.25 rows=1674 width=48) (actual time=74345.280..74345.309 rows=10 loops=1)"
"        Sort Key: (st_hausdorffdistance(ride_details_geom.trajectory, t.trajectory))"
"        Sort Method: top-N heapsort  Memory: 26kB"
"        Buffers: shared hit=122443 read=1862460 written=1"
"        ->  Nested Loop  (cost=10000305624.26..10000329313.89 rows=1674 width=48) (actual time=532.959..74197.926 rows=1674139 loops=1)"
"              Buffers: shared hit=122443 read=1862460 written=1"
"              ->  Limit  (cost=10000305623.85..10000305623.96 rows=1 width=1318) (actual time=532.790..532.820 rows=1 loops=1)"
"                    Buffers: shared hit=15931 read=278324"
"                    ->  Gather Merge  (cost=10000305623.85..10000306437.77 rows=6976 width=1318) (actual time=532.790..532.819 rows=1 loops=1)"
"                          Workers Planned: 2"
"                          Workers Launched: 2"
"                          Buffers: shared hit=15931 read=278324"
"                          ->  Sort  (cost=10000304623.82..10000304632.54 rows=3488 width=1318) (actual time=516.360..516.360 rows=1 loops=3)"
"                                Sort Key: ride_details_geom.""timestamp"""
"                                Sort Method: top-N heapsort  Memory: 29kB"
"                                Buffers: shared hit=15931 read=278324"
"                                Worker 0:  Sort Method: top-N heapsort  Memory: 31kB"
"                                Worker 1:  Sort Method: top-N heapsort  Memory: 31kB"
"                                ->  Parallel Seq Scan on ride_details_geom  (cost=10000000000.00..10000304606.38 rows=3488 width=1318) (actual time=0.186..507.504 rows=41956 loops=3)"
"                                      Filter: (EXTRACT(month FROM ""timestamp"") = '2'::numeric)"
"                                      Rows Removed by Filter: 516091"
"                                      Buffers: shared hit=15826 read=278317"
"              ->  Index Scan using idx_start_point on ride_details_geom t  (cost=0.41..2763.25 rows=167 width=1310) (actual time=0.109..7072.444 rows=1674139 loops=1)"
"                    Index Cond: (start_point && st_expand(ride_details_geom.start_point, '10'::double precision))"
"                    Filter: (((ride_details_geom.trip_id)::text <> (trip_id)::text) AND st_dwithin(ride_details_geom.start_point, start_point, '10'::double precision))"
"                    Rows Removed by Filter: 2"
"                    Buffers: shared hit=103622 read=1578884 written=1"
"Planning:"
"  Buffers: shared hit=6"
"Planning Time: 0.228 ms"
"Execution Time: 74345.334 ms"
 */


/* Test Case 3.3: For the Third case I have selected the first trip for the month of April */
/* Test Case 3.3 with YOUR_INDEX_METHOD_1 */
DROP INDEX taxi_service.idx_start_point;
CREATE INDEX idx_start_point
ON taxi_service.ride_details_geom
USING GIST (START_POINT);

EXPLAIN (ANALYZE ON, BUFFERS ON)

WITH month_trajectory AS (
    SELECT 
        TIMESTAMP,
        START_POINT,
        TRIP_ID AS trajectory_id,
        TRAJECTORY
    FROM 
        taxi_service.ride_details_geom
    WHERE 
        EXTRACT(month FROM TIMESTAMP) = 4
    ORDER BY 
        TIMESTAMP 
    LIMIT 1
)


SELECT 
    r.trajectory_id AS random_trip_id,
    t.TRIP_ID AS other_trip_id,
	ST_HausdorffDistance(r.TRAJECTORY, t.TRAJECTORY) AS similarity
    
FROM 
    month_trajectory r
JOIN
    taxi_service.ride_details_geom t
ON
	r.trajectory_id <> t.TRIP_ID AND
	ST_DWithin(r.START_POINT, t.START_POINT, 10)
ORDER BY 
    similarity
LIMIT 10; 

/* Outputs:
FIRST_TRIP_ID          SIMILAR_TRIP_ID         SIMILARTY
"1396274420620000668"	"1395219662620000668"	0.0011431417234980686
"1396274420620000668"	"1400644575620000653"	0.002143970110190509
"1396274420620000668"	"1394700406620000668"	0.002377772066453332
"1396274420620000668"	"1377258444620000634"	0.002812165180069771
"1396274420620000668"	"1400409636620000089"	0.002814684351754196
"1396274420620000668"	"1395493676620000657"	0.002934345071731599
"1396274420620000668"	"1390968444620000648"	0.0029663705095631064
"1396274420620000668"	"1387803054620000594"	0.002990614819734027
"1396274420620000668"	"1390461215620000036"	0.0029985671578273156
"1396274420620000668"	"1403187404620000634"	0.0031015415521949267
 */
 /* QUERY PLAN:
"Limit  (cost=10000329350.07..10000329350.09 rows=10 width=48) (actual time=218427.567..218427.599 rows=10 loops=1)"
"  Buffers: shared hit=122594 read=1862309 written=3"
"  ->  Sort  (cost=10000329350.07..10000329354.25 rows=1674 width=48) (actual time=218427.567..218427.597 rows=10 loops=1)"
"        Sort Key: (st_hausdorffdistance(ride_details_geom.trajectory, t.trajectory))"
"        Sort Method: top-N heapsort  Memory: 26kB"
"        Buffers: shared hit=122594 read=1862309 written=3"
"        ->  Nested Loop  (cost=10000305624.26..10000329313.89 rows=1674 width=48) (actual time=487.070..218269.886 rows=1674139 loops=1)"
"              Buffers: shared hit=122594 read=1862309 written=3"
"              ->  Limit  (cost=10000305623.85..10000305623.96 rows=1 width=1318) (actual time=486.774..486.804 rows=1 loops=1)"
"                    Buffers: shared hit=16091 read=278164"
"                    ->  Gather Merge  (cost=10000305623.85..10000306437.77 rows=6976 width=1318) (actual time=486.773..486.804 rows=1 loops=1)"
"                          Workers Planned: 2"
"                          Workers Launched: 2"
"                          Buffers: shared hit=16091 read=278164"
"                          ->  Sort  (cost=10000304623.82..10000304632.54 rows=3488 width=1318) (actual time=474.295..474.296 rows=1 loops=3)"
"                                Sort Key: ride_details_geom.""timestamp"""
"                                Sort Method: top-N heapsort  Memory: 29kB"
"                                Buffers: shared hit=16091 read=278164"
"                                Worker 0:  Sort Method: top-N heapsort  Memory: 29kB"
"                                Worker 1:  Sort Method: top-N heapsort  Memory: 27kB"
"                                ->  Parallel Seq Scan on ride_details_geom  (cost=10000000000.00..10000304606.38 rows=3488 width=1318) (actual time=0.091..467.840 rows=44323 loops=3)"
"                                      Filter: (EXTRACT(month FROM ""timestamp"") = '4'::numeric)"
"                                      Rows Removed by Filter: 513724"
"                                      Buffers: shared hit=15981 read=278162"
"              ->  Index Scan using idx_start_point on ride_details_geom t  (cost=0.41..2763.25 rows=167 width=1310) (actual time=0.149..6323.336 rows=1674139 loops=1)"
"                    Index Cond: (start_point && st_expand(ride_details_geom.start_point, '10'::double precision))"
"                    Filter: (((ride_details_geom.trip_id)::text <> (trip_id)::text) AND st_dwithin(ride_details_geom.start_point, start_point, '10'::double precision))"
"                    Rows Removed by Filter: 2"
"                    Buffers: shared hit=103622 read=1578884 written=2"
"Planning:"
"  Buffers: shared hit=6"
"Planning Time: 0.167 ms"
"Execution Time: 218427.619 ms"
 */

/* Test Case 3.3: For the Third case I have selected the first trip for the month of April */
/* Test Case 3.3 with YOUR_INDEX_METHOD_2 */
DROP INDEX taxi_service.idx_start_point;
CREATE INDEX idx_start_point
ON taxi_service.ride_details_geom
USING SPGIST (START_POINT);

EXPLAIN (ANALYZE ON, BUFFERS ON)

WITH month_trajectory AS (
    SELECT 
        TIMESTAMP,
        START_POINT,
        TRIP_ID AS trajectory_id,
        TRAJECTORY
    FROM 
        taxi_service.ride_details_geom
    WHERE 
        EXTRACT(month FROM TIMESTAMP) = 4
    ORDER BY 
        TIMESTAMP 
    LIMIT 1
)


SELECT 
    r.trajectory_id AS random_trip_id,
    t.TRIP_ID AS other_trip_id,
	ST_HausdorffDistance(r.TRAJECTORY, t.TRAJECTORY) AS similarity
    
FROM 
    month_trajectory r
JOIN
    taxi_service.ride_details_geom t
ON
	r.trajectory_id <> t.TRIP_ID AND
	ST_DWithin(r.START_POINT, t.START_POINT, 10)
ORDER BY 
    similarity
LIMIT 10; 

/* Outputs:
FIRST_TRIP_ID          SIMILAR_TRIP_ID         SIMILARTY
"1396274420620000668"	"1395219662620000668"	0.0011431417234980686
"1396274420620000668"	"1400644575620000653"	0.002143970110190509
"1396274420620000668"	"1394700406620000668"	0.002377772066453332
"1396274420620000668"	"1377258444620000634"	0.002812165180069771
"1396274420620000668"	"1400409636620000089"	0.002814684351754196
"1396274420620000668"	"1395493676620000657"	0.002934345071731599
"1396274420620000668"	"1390968444620000648"	0.0029663705095631064
"1396274420620000668"	"1387803054620000594"	0.002990614819734027
"1396274420620000668"	"1390461215620000036"	0.0029985671578273156
"1396274420620000668"	"1403187404620000634"	0.0031015415521949267
 */
 /* Outputs:
"Limit  (cost=10000329350.07..10000329350.09 rows=10 width=48) (actual time=220230.672..220230.713 rows=10 loops=1)"
"  Buffers: shared hit=135880 read=1890588 written=8118"
"  ->  Sort  (cost=10000329350.07..10000329354.25 rows=1674 width=48) (actual time=220230.671..220230.712 rows=10 loops=1)"
"        Sort Key: (st_hausdorffdistance(ride_details_geom.trajectory, t.trajectory))"
"        Sort Method: top-N heapsort  Memory: 26kB"
"        Buffers: shared hit=135880 read=1890588 written=8118"
"        ->  Nested Loop  (cost=10000305624.26..10000329313.89 rows=1674 width=48) (actual time=315.476..220072.206 rows=1674139 loops=1)"
"              Buffers: shared hit=135880 read=1890588 written=8118"
"              ->  Limit  (cost=10000305623.85..10000305623.96 rows=1 width=1318) (actual time=315.350..315.390 rows=1 loops=1)"
"                    Buffers: shared hit=6741 read=287514"
"                    ->  Gather Merge  (cost=10000305623.85..10000306437.77 rows=6976 width=1318) (actual time=315.349..315.389 rows=1 loops=1)"
"                          Workers Planned: 2"
"                          Workers Launched: 2"
"                          Buffers: shared hit=6741 read=287514"
"                          ->  Sort  (cost=10000304623.82..10000304632.54 rows=3488 width=1318) (actual time=303.488..303.488 rows=1 loops=3)"
"                                Sort Key: ride_details_geom.""timestamp"""
"                                Sort Method: top-N heapsort  Memory: 29kB"
"                                Buffers: shared hit=6741 read=287514"
"                                Worker 0:  Sort Method: top-N heapsort  Memory: 31kB"
"                                Worker 1:  Sort Method: top-N heapsort  Memory: 27kB"
"                                ->  Parallel Seq Scan on ride_details_geom  (cost=10000000000.00..10000304606.38 rows=3488 width=1318) (actual time=0.046..296.324 rows=44323 loops=3)"
"                                      Filter: (EXTRACT(month FROM ""timestamp"") = '4'::numeric)"
"                                      Rows Removed by Filter: 513724"
"                                      Buffers: shared hit=6635 read=287508"
"              ->  Index Scan using idx_start_point on ride_details_geom t  (cost=0.41..2763.25 rows=167 width=1310) (actual time=0.091..4968.034 rows=1674139 loops=1)"
"                    Index Cond: (start_point && st_expand(ride_details_geom.start_point, '10'::double precision))"
"                    Filter: (((ride_details_geom.trip_id)::text <> (trip_id)::text) AND st_dwithin(ride_details_geom.start_point, start_point, '10'::double precision))"
"                    Rows Removed by Filter: 2"
"                    Buffers: shared hit=126247 read=1597824 written=8084"
"Planning:"
"  Buffers: shared hit=6"
"Planning Time: 0.166 ms"
"Execution Time: 220230.789 ms"
 */

/* Test Case 3.3: For the Third case I have selected the first trip for the month of April */
/* Test Case 3.3 with YOUR_INDEX_METHOD_3 */
DROP INDEX taxi_service.idx_start_point;
CREATE INDEX idx_start_point
ON taxi_service.ride_details_geom
USING BRIN (START_POINT);

EXPLAIN (ANALYZE ON, BUFFERS ON)

WITH month_trajectory AS (
    SELECT 
        TIMESTAMP,
        START_POINT,
        TRIP_ID AS trajectory_id,
        TRAJECTORY
    FROM 
        taxi_service.ride_details_geom
    WHERE 
        EXTRACT(month FROM TIMESTAMP) = 4
    ORDER BY 
        TIMESTAMP 
    LIMIT 1
)


SELECT 
    r.trajectory_id AS random_trip_id,
    t.TRIP_ID AS other_trip_id,
	ST_HausdorffDistance(r.TRAJECTORY, t.TRAJECTORY) AS similarity
    
FROM 
    month_trajectory r
JOIN
    taxi_service.ride_details_geom t
ON
	r.trajectory_id <> t.TRIP_ID AND
	ST_DWithin(r.START_POINT, t.START_POINT, 10)
ORDER BY 
    similarity
LIMIT 10; 

/* Outputs:
FIRST_TRIP_ID          SIMILAR_TRIP_ID         SIMILARTY
"1396274420620000668"	"1395219662620000668"	0.0011431417234980686
"1396274420620000668"	"1400644575620000653"	0.002143970110190509
"1396274420620000668"	"1394700406620000668"	0.002377772066453332
"1396274420620000668"	"1377258444620000634"	0.002812165180069771
"1396274420620000668"	"1400409636620000089"	0.002814684351754196
"1396274420620000668"	"1395493676620000657"	0.002934345071731599
"1396274420620000668"	"1390968444620000648"	0.0029663705095631064
"1396274420620000668"	"1387803054620000594"	0.002990614819734027
"1396274420620000668"	"1390461215620000036"	0.0029985671578273156
"1396274420620000668"	"1403187404620000634"	0.0031015415521949267
 */
 /* Outputs:
"Limit  (cost=10000695988.13..10000695988.16 rows=10 width=48) (actual time=220449.072..220449.112 rows=10 loops=1)"
"  Buffers: shared hit=21292 read=575263 written=1"
"  ->  Sort  (cost=10000695988.13..10000695992.32 rows=1674 width=48) (actual time=220449.072..220449.111 rows=10 loops=1)"
"        Sort Key: (st_hausdorffdistance(ride_details_geom.trajectory, t.trajectory))"
"        Sort Method: top-N heapsort  Memory: 26kB"
"        Buffers: shared hit=21292 read=575263 written=1"
"        ->  Nested Loop  (cost=10000305678.05..10000695951.96 rows=1674 width=48) (actual time=374.572..220298.746 rows=1674139 loops=1)"
"              Buffers: shared hit=21292 read=575263 written=1"
"              ->  Limit  (cost=10000305623.85..10000305623.96 rows=1 width=1318) (actual time=347.613..347.651 rows=1 loops=1)"
"                    Buffers: shared hit=16031 read=278224"
"                    ->  Gather Merge  (cost=10000305623.85..10000306437.77 rows=6976 width=1318) (actual time=347.612..347.650 rows=1 loops=1)"
"                          Workers Planned: 2"
"                          Workers Launched: 2"
"                          Buffers: shared hit=16031 read=278224"
"                          ->  Sort  (cost=10000304623.82..10000304632.54 rows=3488 width=1318) (actual time=333.657..333.658 rows=1 loops=3)"
"                                Sort Key: ride_details_geom.""timestamp"""
"                                Sort Method: top-N heapsort  Memory: 31kB"
"                                Buffers: shared hit=16031 read=278224"
"                                Worker 0:  Sort Method: top-N heapsort  Memory: 26kB"
"                                Worker 1:  Sort Method: top-N heapsort  Memory: 27kB"
"                                ->  Parallel Seq Scan on ride_details_geom  (cost=10000000000.00..10000304606.38 rows=3488 width=1318) (actual time=0.035..324.934 rows=44323 loops=3)"
"                                      Filter: (EXTRACT(month FROM ""timestamp"") = '4'::numeric)"
"                                      Rows Removed by Filter: 513724"
"                                      Buffers: shared hit=15926 read=278217"
"              ->  Bitmap Heap Scan on ride_details_geom t  (cost=54.21..369401.31 rows=167 width=1310) (actual time=10.438..1863.429 rows=1674139 loops=1)"
"                    Filter: (((ride_details_geom.trip_id)::text <> (trip_id)::text) AND st_dwithin(ride_details_geom.start_point, start_point, '10'::double precision))"
"                    Rows Removed by Filter: 2"
"                    Heap Blocks: lossy=294143"
"                    Buffers: shared hit=49 read=294109 written=1"
"                    ->  Bitmap Index Scan on idx_start_point  (cost=0.00..54.17 rows=23746 width=0) (actual time=10.292..10.292 rows=2941430 loops=1)"
"                          Index Cond: (start_point && st_expand(ride_details_geom.start_point, '10'::double precision))"
"                          Buffers: shared hit=15"
"Planning:"
"  Buffers: shared hit=5 read=1"
"Planning Time: 0.406 ms"
"Execution Time: 220449.137 ms"
 */


